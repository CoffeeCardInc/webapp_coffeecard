generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer {
  customer_id       Int       @id @default(autoincrement())
  full_name         String    @db.VarChar(100)
  email             String    @db.VarChar(255)
  passowrd          String    @db.VarChar(255)
  date_of_birth     String    @db.VarChar(255)
  language          String?   @db.VarChar(255)
  city              String?   @db.VarChar(255)
  membership_status String?   @db.VarChar(255)
  created_on        DateTime  @default(now()) @db.Timestamptz(6)
  last_modifier     DateTime? @db.Timestamptz(6)
  last_login        DateTime? @db.Timestamptz(6)
  userId            String    @unique
  User              User      @relation(fields: [userId], references: [id])
}

model member {
  member_id Int    @id @default(autoincrement())
  userId    String
  shop_id   Int?
}

model membership {
  userId                String
  creation_on           DateTime? @default(now()) @db.Timestamptz(6)
  subscribed_on         DateTime? @db.Timestamp(6)
  active                Int?      @default(0) @db.SmallInt
  duration              Int?
  total_redemptions     Int?
  remaining_redemptions Int?
  refill_frequency      Int?
  last_refill           DateTime? @db.Timestamptz(6)
  last_modifiered       DateTime? @db.Timestamptz(6)
  membership_id         Int       @id @default(autoincrement())
  pass_id               Int
  activated             Boolean?  @default(false)
  pass                  pass      @relation(fields: [pass_id], references: [pass_id])
  Users                 User      @relation(fields: [userId], references: [id])
}

model menu {
  menu_id       Int       @id @default(autoincrement())
  shop_id       Int
  name          String    @db.VarChar(255)
  description   String?
  created_on    DateTime  @default(now()) @db.Timestamptz(6)
  last_modified DateTime? @db.Timestamptz(6)
  modifier_1    Int?
  modifier_2    Int?
  modifier_3    Int?
  modifier_4    Int?
  modifier_5    Int?
}

model modifier {
  modifier_id   Int       @id @default(autoincrement())
  shop_id       Int?
  menu_id       Int?
  name          String?   @db.VarChar
  type          String?   @db.VarChar
  class         String?   @db.VarChar
  description   String?
  ingredients   String?
  created_on    DateTime  @default(now()) @db.Timestamptz(6)
  last_modified DateTime? @db.Timestamptz(6)
}

model pass {
  pass_id                   Int          @id @default(autoincrement())
  shop_id                   Int
  pass_name                 Int
  pass_description          String?
  created_on                DateTime     @default(now()) @db.Timestamptz(6)
  last_modified             DateTime?    @db.Timestamptz(6)
  active                    Int          @default(0) @db.SmallInt
  pass_base_price           Float?
  pass_base_price_frequency Int?
  pass_payment_method       Int?
  pass_additional_pricing   Int?
  pass_other_options        Int?
  pass_currency             String?      @db.VarChar
  perk_item_1               String?
  perk_item_2               String?
  perk_item_3               String?
  perk_item_4               String?
  perk_item_5               String?
  perk_item_6               String?
  perk_item_7               String?
  perk_item_8               String?
  perk_item_9               String?
  perk_item_10              String?
  perk_item_11              String?
  perk_item_12              String?
  custom_perk_item_1        Int?
  custom_perk_item_2        Int?
  custom_perk_item_3        Int?
  custom_perk_item_4        Int?
  custom_perk_item_5        Int?
  custom_perk_item_6        Int?
  custom_perk_item_1_price  Float?
  custom_perk_item_2_price  Float?
  custom_perk_item_3_price  Float?
  custom_perk_item_4_price  Float?
  custom_perk_item_5_price  Float?
  custom_perk_item_6_price  Float?
  visible                   Int?
  requirement_1             Int?         @db.SmallInt
  requirement_2             Int?         @db.SmallInt
  requirement_3             Int?         @db.SmallInt
  requirement_4             Int?         @db.SmallInt
  requirement_5             Int?         @db.SmallInt
  requirement_6             Int?         @db.SmallInt
  requirement_7             Int?         @db.SmallInt
  requirement_8             Int?         @db.SmallInt
  requirement_9             Int?         @db.SmallInt
  membership                membership[]
  shop                      shop         @relation(fields: [shop_id], references: [shop_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model shop {
  shop_id            Int       @id @default(autoincrement())
  shop_name          String?   @db.VarChar(100)
  shop_description   String?
  shop_address       String?
  shop_phone_number  String?   @db.VarChar(20)
  shop_email         String?   @db.VarChar(255)
  shop_owner_name    String?   @db.VarChar(100)
  created_on         DateTime  @default(now()) @db.Timestamptz(6)
  last_modified      DateTime? @db.Timestamptz(6)
  availability_1     Int[]
  availability_2     Int[]
  availability_3     Int[]
  availability_4     Int[]
  availability_5     Int[]
  availability_6     Int[]
  availability_7     Int[]
  active             Int?      @db.SmallInt
  shop_fee           Float?
  shop_pay_frequency Int?
  shop_pay_date      DateTime? @db.Timestamptz(6)
  pass               pass[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String?
  mobile        String?
  accounts      Account[]
  sessions      Session[]
  customer      customer?
  membership    membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
