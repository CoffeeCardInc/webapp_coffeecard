
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model customer
 * 
 */
export type customer = {
  customer_id: number
  full_name: string
  email: string
  passowrd: string
  date_of_birth: string
  language: string | null
  city: string | null
  membership_status: string | null
  created_on: Date
  last_modifier: Date | null
  last_login: Date | null
  user_id: number | null
}

/**
 * Model member
 * 
 */
export type member = {
  member_id: number
  user_id: number | null
  shop_id: number | null
}

/**
 * Model membership
 * 
 */
export type membership = {
  user_id: number | null
  creation_on: Date
  subscribed_on: Date
  active: number
  total_redemptions: number
  remaining_redemptions: number
  refill_frequency: number | null
  last_refill: Date | null
  last_modifiered: Date | null
  membership_id: number
  pass_id: number | null
}

/**
 * Model menu
 * 
 */
export type menu = {
  menu_id: number
  shop_id: number
  name: string
  description: string | null
  created_on: Date
  last_modified: Date | null
  modifier_1: number | null
  modifier_2: number | null
  modifier_3: number | null
  modifier_4: number | null
  modifier_5: number | null
}

/**
 * Model modifier
 * 
 */
export type modifier = {
  modifier_id: number
  shop_id: number | null
  menu_id: number | null
  name: string | null
  type: string | null
  class: string | null
  description: string | null
  ingredients: string | null
  created_on: Date
  last_modifiered: Date | null
}

/**
 * Model pass
 * 
 */
export type pass = {
  pass_id: number
  shop_id: number
  pass_name: number
  pass_description: string | null
  created_on: Date
  last_modified: Date | null
  active: number
  pass_base_price: number | null
  pass_base_price_frequency: number | null
  pass_payment_method: number | null
  pass_additional_pricing: number | null
  pass_other_options: number | null
  pass_currency: string | null
  perk_item_1: number | null
  perk_item_2: number | null
  perk_item_3: number | null
  perk_item_4: number | null
  perk_item_5: number | null
  perk_item_6: number | null
  perk_item_7: number | null
  perk_item_8: number | null
  perk_item_9: number | null
  perk_item_10: number | null
  perk_item_11: number | null
  perk_item_12: number | null
  custom_perk_item_1: number | null
  custom_perk_item_2: number | null
  custom_perk_item_3: number | null
  custom_perk_item_4: number | null
  custom_perk_item_5: number | null
  custom_perk_item_6: number | null
  custom_perk_item_1_price: number | null
  custom_perk_item_2_price: number | null
  custom_perk_item_3_price: number | null
  custom_perk_item_4_price: number | null
  custom_perk_item_5_price: number | null
  custom_perk_item_6_price: number | null
  visible: number | null
  requirement_1: number | null
  requirement_2: number | null
  requirement_3: number | null
  requirement_4: number | null
  requirement_5: number | null
  requirement_6: number | null
  requirement_7: number | null
  requirement_8: number | null
  requirement_9: number | null
}

/**
 * Model shop
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
 */
export type shop = {
  shop_id: number
  shop_name: string | null
  shop_description: string | null
  shop_address: string | null
  shop_phone_number: string | null
  shop_email: string | null
  shop_owner_name: string | null
  created_on: Date
  last_modified: Date | null
  availability_1: number[]
  availability_2: number[]
  availability_3: number[]
  availability_4: number[]
  availability_5: number[]
  availability_6: number[]
  availability_7: number[]
  active: number | null
  shop_fee: number | null
  shop_pay_frquency: number | null
  shop_pay_date: Date | null
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  email: string
  password: string
  is_shop: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.customer`: Exposes CRUD operations for the **customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.customerDelegate<GlobalReject>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.memberDelegate<GlobalReject>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.membershipDelegate<GlobalReject>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): Prisma.menuDelegate<GlobalReject>;

  /**
   * `prisma.modifier`: Exposes CRUD operations for the **modifier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modifiers
    * const modifiers = await prisma.modifier.findMany()
    * ```
    */
  get modifier(): Prisma.modifierDelegate<GlobalReject>;

  /**
   * `prisma.pass`: Exposes CRUD operations for the **pass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passes
    * const passes = await prisma.pass.findMany()
    * ```
    */
  get pass(): Prisma.passDelegate<GlobalReject>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.shopDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    customer: 'customer',
    member: 'member',
    membership: 'membership',
    menu: 'menu',
    modifier: 'modifier',
    pass: 'pass',
    shop: 'shop',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    customer_id: number | null
    user_id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    customer_id: number | null
    user_id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    customer_id: number | null
    full_name: string | null
    email: string | null
    passowrd: string | null
    date_of_birth: string | null
    language: string | null
    city: string | null
    membership_status: string | null
    created_on: Date | null
    last_modifier: Date | null
    last_login: Date | null
    user_id: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    customer_id: number | null
    full_name: string | null
    email: string | null
    passowrd: string | null
    date_of_birth: string | null
    language: string | null
    city: string | null
    membership_status: string | null
    created_on: Date | null
    last_modifier: Date | null
    last_login: Date | null
    user_id: number | null
  }

  export type CustomerCountAggregateOutputType = {
    customer_id: number
    full_name: number
    email: number
    passowrd: number
    date_of_birth: number
    language: number
    city: number
    membership_status: number
    created_on: number
    last_modifier: number
    last_login: number
    user_id: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    customer_id?: true
    user_id?: true
  }

  export type CustomerSumAggregateInputType = {
    customer_id?: true
    user_id?: true
  }

  export type CustomerMinAggregateInputType = {
    customer_id?: true
    full_name?: true
    email?: true
    passowrd?: true
    date_of_birth?: true
    language?: true
    city?: true
    membership_status?: true
    created_on?: true
    last_modifier?: true
    last_login?: true
    user_id?: true
  }

  export type CustomerMaxAggregateInputType = {
    customer_id?: true
    full_name?: true
    email?: true
    passowrd?: true
    date_of_birth?: true
    language?: true
    city?: true
    membership_status?: true
    created_on?: true
    last_modifier?: true
    last_login?: true
    user_id?: true
  }

  export type CustomerCountAggregateInputType = {
    customer_id?: true
    full_name?: true
    email?: true
    passowrd?: true
    date_of_birth?: true
    language?: true
    city?: true
    membership_status?: true
    created_on?: true
    last_modifier?: true
    last_login?: true
    user_id?: true
    _all?: true
  }

  export type CustomerAggregateArgs = {
    /**
     * Filter which customer to aggregate.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs = {
    where?: customerWhereInput
    orderBy?: Enumerable<customerOrderByWithAggregationInput>
    by: Array<CustomerScalarFieldEnum>
    having?: customerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    customer_id: number
    full_name: string
    email: string
    passowrd: string
    date_of_birth: string
    language: string | null
    city: string | null
    membership_status: string | null
    created_on: Date
    last_modifier: Date | null
    last_login: Date | null
    user_id: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type customerSelect = {
    customer_id?: boolean
    full_name?: boolean
    email?: boolean
    passowrd?: boolean
    date_of_birth?: boolean
    language?: boolean
    city?: boolean
    membership_status?: boolean
    created_on?: boolean
    last_modifier?: boolean
    last_login?: boolean
    user_id?: boolean
  }


  export type customerGetPayload<S extends boolean | null | undefined | customerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? customer :
    S extends undefined ? never :
    S extends { include: any } & (customerArgs | customerFindManyArgs)
    ? customer 
    : S extends { select: any } & (customerArgs | customerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof customer ? customer[P] : never
  } 
      : customer


  type customerCountArgs = Merge<
    Omit<customerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }
  >

  export interface customerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Customer that matches the filter.
     * @param {customerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customer'> extends True ? Prisma__customerClient<customerGetPayload<T>> : Prisma__customerClient<customerGetPayload<T> | null, null>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {customerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customerFindUniqueOrThrowArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customer'> extends True ? Prisma__customerClient<customerGetPayload<T>> : Prisma__customerClient<customerGetPayload<T> | null, null>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customerFindFirstOrThrowArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `customer_id`
     * const customerWithCustomer_idOnly = await prisma.customer.findMany({ select: { customer_id: true } })
     * 
    **/
    findMany<T extends customerFindManyArgs>(
      args?: SelectSubset<T, customerFindManyArgs>
    ): PrismaPromise<Array<customerGetPayload<T>>>

    /**
     * Create a Customer.
     * @param {customerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends customerCreateArgs>(
      args: SelectSubset<T, customerCreateArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Create many Customers.
     *     @param {customerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customerCreateManyArgs>(
      args?: SelectSubset<T, customerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {customerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends customerDeleteArgs>(
      args: SelectSubset<T, customerDeleteArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Update one Customer.
     * @param {customerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customerUpdateArgs>(
      args: SelectSubset<T, customerUpdateArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Delete zero or more Customers.
     * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customerDeleteManyArgs>(
      args?: SelectSubset<T, customerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customerUpdateManyArgs>(
      args: SelectSubset<T, customerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends customerUpsertArgs>(
      args: SelectSubset<T, customerUpsertArgs>
    ): Prisma__customerClient<customerGetPayload<T>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customerCountArgs>(
      args?: Subset<T, customerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customer base type for findUnique actions
   */
  export type customerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where: customerWhereUniqueInput
  }

  /**
   * customer findUnique
   */
  export interface customerFindUniqueArgs extends customerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer findUniqueOrThrow
   */
  export type customerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer base type for findFirst actions
   */
  export type customerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     * 
    **/
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * customer findFirst
   */
  export interface customerFindFirstArgs extends customerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer findFirstOrThrow
   */
  export type customerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     * 
    **/
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * customer findMany
   */
  export type customerFindManyArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customers to fetch.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * customer create
   */
  export type customerCreateArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The data needed to create a customer.
     * 
    **/
    data: XOR<customerCreateInput, customerUncheckedCreateInput>
  }


  /**
   * customer createMany
   */
  export type customerCreateManyArgs = {
    /**
     * The data used to create many customers.
     * 
    **/
    data: Enumerable<customerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customer update
   */
  export type customerUpdateArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The data needed to update a customer.
     * 
    **/
    data: XOR<customerUpdateInput, customerUncheckedUpdateInput>
    /**
     * Choose, which customer to update.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer updateMany
   */
  export type customerUpdateManyArgs = {
    /**
     * The data used to update customers.
     * 
    **/
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     * 
    **/
    where?: customerWhereInput
  }


  /**
   * customer upsert
   */
  export type customerUpsertArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The filter to search for the customer to update in case it exists.
     * 
    **/
    where: customerWhereUniqueInput
    /**
     * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
     * 
    **/
    create: XOR<customerCreateInput, customerUncheckedCreateInput>
    /**
     * In case the customer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customerUpdateInput, customerUncheckedUpdateInput>
  }


  /**
   * customer delete
   */
  export type customerDeleteArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter which customer to delete.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer deleteMany
   */
  export type customerDeleteManyArgs = {
    /**
     * Filter which customers to delete
     * 
    **/
    where?: customerWhereInput
  }


  /**
   * customer without action
   */
  export type customerArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
  }



  /**
   * Model member
   */


  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberAvgAggregateOutputType = {
    member_id: number | null
    user_id: number | null
    shop_id: number | null
  }

  export type MemberSumAggregateOutputType = {
    member_id: number | null
    user_id: number | null
    shop_id: number | null
  }

  export type MemberMinAggregateOutputType = {
    member_id: number | null
    user_id: number | null
    shop_id: number | null
  }

  export type MemberMaxAggregateOutputType = {
    member_id: number | null
    user_id: number | null
    shop_id: number | null
  }

  export type MemberCountAggregateOutputType = {
    member_id: number
    user_id: number
    shop_id: number
    _all: number
  }


  export type MemberAvgAggregateInputType = {
    member_id?: true
    user_id?: true
    shop_id?: true
  }

  export type MemberSumAggregateInputType = {
    member_id?: true
    user_id?: true
    shop_id?: true
  }

  export type MemberMinAggregateInputType = {
    member_id?: true
    user_id?: true
    shop_id?: true
  }

  export type MemberMaxAggregateInputType = {
    member_id?: true
    user_id?: true
    shop_id?: true
  }

  export type MemberCountAggregateInputType = {
    member_id?: true
    user_id?: true
    shop_id?: true
    _all?: true
  }

  export type MemberAggregateArgs = {
    /**
     * Filter which member to aggregate.
     * 
    **/
    where?: memberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of members to fetch.
     * 
    **/
    orderBy?: Enumerable<memberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: memberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs = {
    where?: memberWhereInput
    orderBy?: Enumerable<memberOrderByWithAggregationInput>
    by: Array<MemberScalarFieldEnum>
    having?: memberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _avg?: MemberAvgAggregateInputType
    _sum?: MemberSumAggregateInputType
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }


  export type MemberGroupByOutputType = {
    member_id: number
    user_id: number | null
    shop_id: number | null
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type memberSelect = {
    member_id?: boolean
    user_id?: boolean
    shop_id?: boolean
  }


  export type memberGetPayload<S extends boolean | null | undefined | memberArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? member :
    S extends undefined ? never :
    S extends { include: any } & (memberArgs | memberFindManyArgs)
    ? member 
    : S extends { select: any } & (memberArgs | memberFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof member ? member[P] : never
  } 
      : member


  type memberCountArgs = Merge<
    Omit<memberFindManyArgs, 'select' | 'include'> & {
      select?: MemberCountAggregateInputType | true
    }
  >

  export interface memberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Member that matches the filter.
     * @param {memberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends memberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, memberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'member'> extends True ? Prisma__memberClient<memberGetPayload<T>> : Prisma__memberClient<memberGetPayload<T> | null, null>

    /**
     * Find one Member that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {memberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends memberFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, memberFindUniqueOrThrowArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {memberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends memberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, memberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'member'> extends True ? Prisma__memberClient<memberGetPayload<T>> : Prisma__memberClient<memberGetPayload<T> | null, null>

    /**
     * Find the first Member that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {memberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends memberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, memberFindFirstOrThrowArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {memberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `member_id`
     * const memberWithMember_idOnly = await prisma.member.findMany({ select: { member_id: true } })
     * 
    **/
    findMany<T extends memberFindManyArgs>(
      args?: SelectSubset<T, memberFindManyArgs>
    ): PrismaPromise<Array<memberGetPayload<T>>>

    /**
     * Create a Member.
     * @param {memberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
    **/
    create<T extends memberCreateArgs>(
      args: SelectSubset<T, memberCreateArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Create many Members.
     *     @param {memberCreateManyArgs} args - Arguments to create many Members.
     *     @example
     *     // Create many Members
     *     const member = await prisma.member.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends memberCreateManyArgs>(
      args?: SelectSubset<T, memberCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Member.
     * @param {memberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
    **/
    delete<T extends memberDeleteArgs>(
      args: SelectSubset<T, memberDeleteArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Update one Member.
     * @param {memberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends memberUpdateArgs>(
      args: SelectSubset<T, memberUpdateArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Delete zero or more Members.
     * @param {memberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends memberDeleteManyArgs>(
      args?: SelectSubset<T, memberDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {memberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends memberUpdateManyArgs>(
      args: SelectSubset<T, memberUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Member.
     * @param {memberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
    **/
    upsert<T extends memberUpsertArgs>(
      args: SelectSubset<T, memberUpsertArgs>
    ): Prisma__memberClient<memberGetPayload<T>>

    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {memberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends memberCountArgs>(
      args?: Subset<T, memberCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__memberClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * member base type for findUnique actions
   */
  export type memberFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter, which member to fetch.
     * 
    **/
    where: memberWhereUniqueInput
  }

  /**
   * member findUnique
   */
  export interface memberFindUniqueArgs extends memberFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * member findUniqueOrThrow
   */
  export type memberFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter, which member to fetch.
     * 
    **/
    where: memberWhereUniqueInput
  }


  /**
   * member base type for findFirst actions
   */
  export type memberFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter, which member to fetch.
     * 
    **/
    where?: memberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of members to fetch.
     * 
    **/
    orderBy?: Enumerable<memberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for members.
     * 
    **/
    cursor?: memberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of members.
     * 
    **/
    distinct?: Enumerable<MemberScalarFieldEnum>
  }

  /**
   * member findFirst
   */
  export interface memberFindFirstArgs extends memberFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * member findFirstOrThrow
   */
  export type memberFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter, which member to fetch.
     * 
    **/
    where?: memberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of members to fetch.
     * 
    **/
    orderBy?: Enumerable<memberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for members.
     * 
    **/
    cursor?: memberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of members.
     * 
    **/
    distinct?: Enumerable<MemberScalarFieldEnum>
  }


  /**
   * member findMany
   */
  export type memberFindManyArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter, which members to fetch.
     * 
    **/
    where?: memberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of members to fetch.
     * 
    **/
    orderBy?: Enumerable<memberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing members.
     * 
    **/
    cursor?: memberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` members.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MemberScalarFieldEnum>
  }


  /**
   * member create
   */
  export type memberCreateArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * The data needed to create a member.
     * 
    **/
    data: XOR<memberCreateInput, memberUncheckedCreateInput>
  }


  /**
   * member createMany
   */
  export type memberCreateManyArgs = {
    /**
     * The data used to create many members.
     * 
    **/
    data: Enumerable<memberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * member update
   */
  export type memberUpdateArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * The data needed to update a member.
     * 
    **/
    data: XOR<memberUpdateInput, memberUncheckedUpdateInput>
    /**
     * Choose, which member to update.
     * 
    **/
    where: memberWhereUniqueInput
  }


  /**
   * member updateMany
   */
  export type memberUpdateManyArgs = {
    /**
     * The data used to update members.
     * 
    **/
    data: XOR<memberUpdateManyMutationInput, memberUncheckedUpdateManyInput>
    /**
     * Filter which members to update
     * 
    **/
    where?: memberWhereInput
  }


  /**
   * member upsert
   */
  export type memberUpsertArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * The filter to search for the member to update in case it exists.
     * 
    **/
    where: memberWhereUniqueInput
    /**
     * In case the member found by the `where` argument doesn't exist, create a new member with this data.
     * 
    **/
    create: XOR<memberCreateInput, memberUncheckedCreateInput>
    /**
     * In case the member was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<memberUpdateInput, memberUncheckedUpdateInput>
  }


  /**
   * member delete
   */
  export type memberDeleteArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
    /**
     * Filter which member to delete.
     * 
    **/
    where: memberWhereUniqueInput
  }


  /**
   * member deleteMany
   */
  export type memberDeleteManyArgs = {
    /**
     * Filter which members to delete
     * 
    **/
    where?: memberWhereInput
  }


  /**
   * member without action
   */
  export type memberArgs = {
    /**
     * Select specific fields to fetch from the member
     * 
    **/
    select?: memberSelect | null
  }



  /**
   * Model membership
   */


  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    user_id: number | null
    active: number | null
    total_redemptions: number | null
    remaining_redemptions: number | null
    refill_frequency: number | null
    membership_id: number | null
    pass_id: number | null
  }

  export type MembershipSumAggregateOutputType = {
    user_id: number | null
    active: number | null
    total_redemptions: number | null
    remaining_redemptions: number | null
    refill_frequency: number | null
    membership_id: number | null
    pass_id: number | null
  }

  export type MembershipMinAggregateOutputType = {
    user_id: number | null
    creation_on: Date | null
    subscribed_on: Date | null
    active: number | null
    total_redemptions: number | null
    remaining_redemptions: number | null
    refill_frequency: number | null
    last_refill: Date | null
    last_modifiered: Date | null
    membership_id: number | null
    pass_id: number | null
  }

  export type MembershipMaxAggregateOutputType = {
    user_id: number | null
    creation_on: Date | null
    subscribed_on: Date | null
    active: number | null
    total_redemptions: number | null
    remaining_redemptions: number | null
    refill_frequency: number | null
    last_refill: Date | null
    last_modifiered: Date | null
    membership_id: number | null
    pass_id: number | null
  }

  export type MembershipCountAggregateOutputType = {
    user_id: number
    creation_on: number
    subscribed_on: number
    active: number
    total_redemptions: number
    remaining_redemptions: number
    refill_frequency: number
    last_refill: number
    last_modifiered: number
    membership_id: number
    pass_id: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    user_id?: true
    active?: true
    total_redemptions?: true
    remaining_redemptions?: true
    refill_frequency?: true
    membership_id?: true
    pass_id?: true
  }

  export type MembershipSumAggregateInputType = {
    user_id?: true
    active?: true
    total_redemptions?: true
    remaining_redemptions?: true
    refill_frequency?: true
    membership_id?: true
    pass_id?: true
  }

  export type MembershipMinAggregateInputType = {
    user_id?: true
    creation_on?: true
    subscribed_on?: true
    active?: true
    total_redemptions?: true
    remaining_redemptions?: true
    refill_frequency?: true
    last_refill?: true
    last_modifiered?: true
    membership_id?: true
    pass_id?: true
  }

  export type MembershipMaxAggregateInputType = {
    user_id?: true
    creation_on?: true
    subscribed_on?: true
    active?: true
    total_redemptions?: true
    remaining_redemptions?: true
    refill_frequency?: true
    last_refill?: true
    last_modifiered?: true
    membership_id?: true
    pass_id?: true
  }

  export type MembershipCountAggregateInputType = {
    user_id?: true
    creation_on?: true
    subscribed_on?: true
    active?: true
    total_redemptions?: true
    remaining_redemptions?: true
    refill_frequency?: true
    last_refill?: true
    last_modifiered?: true
    membership_id?: true
    pass_id?: true
    _all?: true
  }

  export type MembershipAggregateArgs = {
    /**
     * Filter which membership to aggregate.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs = {
    where?: membershipWhereInput
    orderBy?: Enumerable<membershipOrderByWithAggregationInput>
    by: Array<MembershipScalarFieldEnum>
    having?: membershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }


  export type MembershipGroupByOutputType = {
    user_id: number | null
    creation_on: Date
    subscribed_on: Date
    active: number
    total_redemptions: number
    remaining_redemptions: number
    refill_frequency: number | null
    last_refill: Date | null
    last_modifiered: Date | null
    membership_id: number
    pass_id: number | null
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type membershipSelect = {
    user_id?: boolean
    creation_on?: boolean
    subscribed_on?: boolean
    active?: boolean
    total_redemptions?: boolean
    remaining_redemptions?: boolean
    refill_frequency?: boolean
    last_refill?: boolean
    last_modifiered?: boolean
    membership_id?: boolean
    pass_id?: boolean
  }


  export type membershipGetPayload<S extends boolean | null | undefined | membershipArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? membership :
    S extends undefined ? never :
    S extends { include: any } & (membershipArgs | membershipFindManyArgs)
    ? membership 
    : S extends { select: any } & (membershipArgs | membershipFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof membership ? membership[P] : never
  } 
      : membership


  type membershipCountArgs = Merge<
    Omit<membershipFindManyArgs, 'select' | 'include'> & {
      select?: MembershipCountAggregateInputType | true
    }
  >

  export interface membershipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Membership that matches the filter.
     * @param {membershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends membershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, membershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'membership'> extends True ? Prisma__membershipClient<membershipGetPayload<T>> : Prisma__membershipClient<membershipGetPayload<T> | null, null>

    /**
     * Find one Membership that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {membershipFindUniqueOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends membershipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, membershipFindUniqueOrThrowArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends membershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, membershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'membership'> extends True ? Prisma__membershipClient<membershipGetPayload<T>> : Prisma__membershipClient<membershipGetPayload<T> | null, null>

    /**
     * Find the first Membership that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindFirstOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends membershipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, membershipFindFirstOrThrowArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const membershipWithUser_idOnly = await prisma.membership.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends membershipFindManyArgs>(
      args?: SelectSubset<T, membershipFindManyArgs>
    ): PrismaPromise<Array<membershipGetPayload<T>>>

    /**
     * Create a Membership.
     * @param {membershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
    **/
    create<T extends membershipCreateArgs>(
      args: SelectSubset<T, membershipCreateArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Create many Memberships.
     *     @param {membershipCreateManyArgs} args - Arguments to create many Memberships.
     *     @example
     *     // Create many Memberships
     *     const membership = await prisma.membership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends membershipCreateManyArgs>(
      args?: SelectSubset<T, membershipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Membership.
     * @param {membershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
    **/
    delete<T extends membershipDeleteArgs>(
      args: SelectSubset<T, membershipDeleteArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Update one Membership.
     * @param {membershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends membershipUpdateArgs>(
      args: SelectSubset<T, membershipUpdateArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Delete zero or more Memberships.
     * @param {membershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends membershipDeleteManyArgs>(
      args?: SelectSubset<T, membershipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends membershipUpdateManyArgs>(
      args: SelectSubset<T, membershipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Membership.
     * @param {membershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
    **/
    upsert<T extends membershipUpsertArgs>(
      args: SelectSubset<T, membershipUpsertArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends membershipCountArgs>(
      args?: Subset<T, membershipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__membershipClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * membership base type for findUnique actions
   */
  export type membershipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where: membershipWhereUniqueInput
  }

  /**
   * membership findUnique
   */
  export interface membershipFindUniqueArgs extends membershipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * membership findUniqueOrThrow
   */
  export type membershipFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where: membershipWhereUniqueInput
  }


  /**
   * membership base type for findFirst actions
   */
  export type membershipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for memberships.
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of memberships.
     * 
    **/
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }

  /**
   * membership findFirst
   */
  export interface membershipFindFirstArgs extends membershipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * membership findFirstOrThrow
   */
  export type membershipFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for memberships.
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of memberships.
     * 
    **/
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * membership findMany
   */
  export type membershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter, which memberships to fetch.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing memberships.
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * membership create
   */
  export type membershipCreateArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * The data needed to create a membership.
     * 
    **/
    data: XOR<membershipCreateInput, membershipUncheckedCreateInput>
  }


  /**
   * membership createMany
   */
  export type membershipCreateManyArgs = {
    /**
     * The data used to create many memberships.
     * 
    **/
    data: Enumerable<membershipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * membership update
   */
  export type membershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * The data needed to update a membership.
     * 
    **/
    data: XOR<membershipUpdateInput, membershipUncheckedUpdateInput>
    /**
     * Choose, which membership to update.
     * 
    **/
    where: membershipWhereUniqueInput
  }


  /**
   * membership updateMany
   */
  export type membershipUpdateManyArgs = {
    /**
     * The data used to update memberships.
     * 
    **/
    data: XOR<membershipUpdateManyMutationInput, membershipUncheckedUpdateManyInput>
    /**
     * Filter which memberships to update
     * 
    **/
    where?: membershipWhereInput
  }


  /**
   * membership upsert
   */
  export type membershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * The filter to search for the membership to update in case it exists.
     * 
    **/
    where: membershipWhereUniqueInput
    /**
     * In case the membership found by the `where` argument doesn't exist, create a new membership with this data.
     * 
    **/
    create: XOR<membershipCreateInput, membershipUncheckedCreateInput>
    /**
     * In case the membership was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<membershipUpdateInput, membershipUncheckedUpdateInput>
  }


  /**
   * membership delete
   */
  export type membershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Filter which membership to delete.
     * 
    **/
    where: membershipWhereUniqueInput
  }


  /**
   * membership deleteMany
   */
  export type membershipDeleteManyArgs = {
    /**
     * Filter which memberships to delete
     * 
    **/
    where?: membershipWhereInput
  }


  /**
   * membership without action
   */
  export type membershipArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
  }



  /**
   * Model menu
   */


  export type AggregateMenu = {
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  export type MenuAvgAggregateOutputType = {
    menu_id: number | null
    shop_id: number | null
    modifier_1: number | null
    modifier_2: number | null
    modifier_3: number | null
    modifier_4: number | null
    modifier_5: number | null
  }

  export type MenuSumAggregateOutputType = {
    menu_id: number | null
    shop_id: number | null
    modifier_1: number | null
    modifier_2: number | null
    modifier_3: number | null
    modifier_4: number | null
    modifier_5: number | null
  }

  export type MenuMinAggregateOutputType = {
    menu_id: number | null
    shop_id: number | null
    name: string | null
    description: string | null
    created_on: Date | null
    last_modified: Date | null
    modifier_1: number | null
    modifier_2: number | null
    modifier_3: number | null
    modifier_4: number | null
    modifier_5: number | null
  }

  export type MenuMaxAggregateOutputType = {
    menu_id: number | null
    shop_id: number | null
    name: string | null
    description: string | null
    created_on: Date | null
    last_modified: Date | null
    modifier_1: number | null
    modifier_2: number | null
    modifier_3: number | null
    modifier_4: number | null
    modifier_5: number | null
  }

  export type MenuCountAggregateOutputType = {
    menu_id: number
    shop_id: number
    name: number
    description: number
    created_on: number
    last_modified: number
    modifier_1: number
    modifier_2: number
    modifier_3: number
    modifier_4: number
    modifier_5: number
    _all: number
  }


  export type MenuAvgAggregateInputType = {
    menu_id?: true
    shop_id?: true
    modifier_1?: true
    modifier_2?: true
    modifier_3?: true
    modifier_4?: true
    modifier_5?: true
  }

  export type MenuSumAggregateInputType = {
    menu_id?: true
    shop_id?: true
    modifier_1?: true
    modifier_2?: true
    modifier_3?: true
    modifier_4?: true
    modifier_5?: true
  }

  export type MenuMinAggregateInputType = {
    menu_id?: true
    shop_id?: true
    name?: true
    description?: true
    created_on?: true
    last_modified?: true
    modifier_1?: true
    modifier_2?: true
    modifier_3?: true
    modifier_4?: true
    modifier_5?: true
  }

  export type MenuMaxAggregateInputType = {
    menu_id?: true
    shop_id?: true
    name?: true
    description?: true
    created_on?: true
    last_modified?: true
    modifier_1?: true
    modifier_2?: true
    modifier_3?: true
    modifier_4?: true
    modifier_5?: true
  }

  export type MenuCountAggregateInputType = {
    menu_id?: true
    shop_id?: true
    name?: true
    description?: true
    created_on?: true
    last_modified?: true
    modifier_1?: true
    modifier_2?: true
    modifier_3?: true
    modifier_4?: true
    modifier_5?: true
    _all?: true
  }

  export type MenuAggregateArgs = {
    /**
     * Filter which menu to aggregate.
     * 
    **/
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     * 
    **/
    orderBy?: Enumerable<menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned menus
    **/
    _count?: true | MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuMaxAggregateInputType
  }

  export type GetMenuAggregateType<T extends MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu[P]>
      : GetScalarType<T[P], AggregateMenu[P]>
  }




  export type MenuGroupByArgs = {
    where?: menuWhereInput
    orderBy?: Enumerable<menuOrderByWithAggregationInput>
    by: Array<MenuScalarFieldEnum>
    having?: menuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCountAggregateInputType | true
    _avg?: MenuAvgAggregateInputType
    _sum?: MenuSumAggregateInputType
    _min?: MenuMinAggregateInputType
    _max?: MenuMaxAggregateInputType
  }


  export type MenuGroupByOutputType = {
    menu_id: number
    shop_id: number
    name: string
    description: string | null
    created_on: Date
    last_modified: Date | null
    modifier_1: number | null
    modifier_2: number | null
    modifier_3: number | null
    modifier_4: number | null
    modifier_5: number | null
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  type GetMenuGroupByPayload<T extends MenuGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuGroupByOutputType[P]>
            : GetScalarType<T[P], MenuGroupByOutputType[P]>
        }
      >
    >


  export type menuSelect = {
    menu_id?: boolean
    shop_id?: boolean
    name?: boolean
    description?: boolean
    created_on?: boolean
    last_modified?: boolean
    modifier_1?: boolean
    modifier_2?: boolean
    modifier_3?: boolean
    modifier_4?: boolean
    modifier_5?: boolean
  }


  export type menuGetPayload<S extends boolean | null | undefined | menuArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? menu :
    S extends undefined ? never :
    S extends { include: any } & (menuArgs | menuFindManyArgs)
    ? menu 
    : S extends { select: any } & (menuArgs | menuFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof menu ? menu[P] : never
  } 
      : menu


  type menuCountArgs = Merge<
    Omit<menuFindManyArgs, 'select' | 'include'> & {
      select?: MenuCountAggregateInputType | true
    }
  >

  export interface menuDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Menu that matches the filter.
     * @param {menuFindUniqueArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends menuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, menuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'menu'> extends True ? Prisma__menuClient<menuGetPayload<T>> : Prisma__menuClient<menuGetPayload<T> | null, null>

    /**
     * Find one Menu that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {menuFindUniqueOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends menuFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, menuFindUniqueOrThrowArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Find the first Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindFirstArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends menuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, menuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'menu'> extends True ? Prisma__menuClient<menuGetPayload<T>> : Prisma__menuClient<menuGetPayload<T> | null, null>

    /**
     * Find the first Menu that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindFirstOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends menuFindFirstOrThrowArgs>(
      args?: SelectSubset<T, menuFindFirstOrThrowArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Find zero or more Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menus
     * const menus = await prisma.menu.findMany()
     * 
     * // Get first 10 Menus
     * const menus = await prisma.menu.findMany({ take: 10 })
     * 
     * // Only select the `menu_id`
     * const menuWithMenu_idOnly = await prisma.menu.findMany({ select: { menu_id: true } })
     * 
    **/
    findMany<T extends menuFindManyArgs>(
      args?: SelectSubset<T, menuFindManyArgs>
    ): PrismaPromise<Array<menuGetPayload<T>>>

    /**
     * Create a Menu.
     * @param {menuCreateArgs} args - Arguments to create a Menu.
     * @example
     * // Create one Menu
     * const Menu = await prisma.menu.create({
     *   data: {
     *     // ... data to create a Menu
     *   }
     * })
     * 
    **/
    create<T extends menuCreateArgs>(
      args: SelectSubset<T, menuCreateArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Create many Menus.
     *     @param {menuCreateManyArgs} args - Arguments to create many Menus.
     *     @example
     *     // Create many Menus
     *     const menu = await prisma.menu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends menuCreateManyArgs>(
      args?: SelectSubset<T, menuCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Menu.
     * @param {menuDeleteArgs} args - Arguments to delete one Menu.
     * @example
     * // Delete one Menu
     * const Menu = await prisma.menu.delete({
     *   where: {
     *     // ... filter to delete one Menu
     *   }
     * })
     * 
    **/
    delete<T extends menuDeleteArgs>(
      args: SelectSubset<T, menuDeleteArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Update one Menu.
     * @param {menuUpdateArgs} args - Arguments to update one Menu.
     * @example
     * // Update one Menu
     * const menu = await prisma.menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends menuUpdateArgs>(
      args: SelectSubset<T, menuUpdateArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Delete zero or more Menus.
     * @param {menuDeleteManyArgs} args - Arguments to filter Menus to delete.
     * @example
     * // Delete a few Menus
     * const { count } = await prisma.menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends menuDeleteManyArgs>(
      args?: SelectSubset<T, menuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menus
     * const menu = await prisma.menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends menuUpdateManyArgs>(
      args: SelectSubset<T, menuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu.
     * @param {menuUpsertArgs} args - Arguments to update or create a Menu.
     * @example
     * // Update or create a Menu
     * const menu = await prisma.menu.upsert({
     *   create: {
     *     // ... data to create a Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu we want to update
     *   }
     * })
    **/
    upsert<T extends menuUpsertArgs>(
      args: SelectSubset<T, menuUpsertArgs>
    ): Prisma__menuClient<menuGetPayload<T>>

    /**
     * Count the number of Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuCountArgs} args - Arguments to filter Menus to count.
     * @example
     * // Count the number of Menus
     * const count = await prisma.menu.count({
     *   where: {
     *     // ... the filter for the Menus we want to count
     *   }
     * })
    **/
    count<T extends menuCountArgs>(
      args?: Subset<T, menuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuAggregateArgs>(args: Subset<T, MenuAggregateArgs>): PrismaPromise<GetMenuAggregateType<T>>

    /**
     * Group by Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuGroupByArgs['orderBy'] }
        : { orderBy?: MenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__menuClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * menu base type for findUnique actions
   */
  export type menuFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter, which menu to fetch.
     * 
    **/
    where: menuWhereUniqueInput
  }

  /**
   * menu findUnique
   */
  export interface menuFindUniqueArgs extends menuFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menu findUniqueOrThrow
   */
  export type menuFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter, which menu to fetch.
     * 
    **/
    where: menuWhereUniqueInput
  }


  /**
   * menu base type for findFirst actions
   */
  export type menuFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter, which menu to fetch.
     * 
    **/
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     * 
    **/
    orderBy?: Enumerable<menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menus.
     * 
    **/
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menus.
     * 
    **/
    distinct?: Enumerable<MenuScalarFieldEnum>
  }

  /**
   * menu findFirst
   */
  export interface menuFindFirstArgs extends menuFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * menu findFirstOrThrow
   */
  export type menuFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter, which menu to fetch.
     * 
    **/
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     * 
    **/
    orderBy?: Enumerable<menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menus.
     * 
    **/
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menus.
     * 
    **/
    distinct?: Enumerable<MenuScalarFieldEnum>
  }


  /**
   * menu findMany
   */
  export type menuFindManyArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter, which menus to fetch.
     * 
    **/
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     * 
    **/
    orderBy?: Enumerable<menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing menus.
     * 
    **/
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MenuScalarFieldEnum>
  }


  /**
   * menu create
   */
  export type menuCreateArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * The data needed to create a menu.
     * 
    **/
    data: XOR<menuCreateInput, menuUncheckedCreateInput>
  }


  /**
   * menu createMany
   */
  export type menuCreateManyArgs = {
    /**
     * The data used to create many menus.
     * 
    **/
    data: Enumerable<menuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * menu update
   */
  export type menuUpdateArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * The data needed to update a menu.
     * 
    **/
    data: XOR<menuUpdateInput, menuUncheckedUpdateInput>
    /**
     * Choose, which menu to update.
     * 
    **/
    where: menuWhereUniqueInput
  }


  /**
   * menu updateMany
   */
  export type menuUpdateManyArgs = {
    /**
     * The data used to update menus.
     * 
    **/
    data: XOR<menuUpdateManyMutationInput, menuUncheckedUpdateManyInput>
    /**
     * Filter which menus to update
     * 
    **/
    where?: menuWhereInput
  }


  /**
   * menu upsert
   */
  export type menuUpsertArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * The filter to search for the menu to update in case it exists.
     * 
    **/
    where: menuWhereUniqueInput
    /**
     * In case the menu found by the `where` argument doesn't exist, create a new menu with this data.
     * 
    **/
    create: XOR<menuCreateInput, menuUncheckedCreateInput>
    /**
     * In case the menu was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<menuUpdateInput, menuUncheckedUpdateInput>
  }


  /**
   * menu delete
   */
  export type menuDeleteArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
    /**
     * Filter which menu to delete.
     * 
    **/
    where: menuWhereUniqueInput
  }


  /**
   * menu deleteMany
   */
  export type menuDeleteManyArgs = {
    /**
     * Filter which menus to delete
     * 
    **/
    where?: menuWhereInput
  }


  /**
   * menu without action
   */
  export type menuArgs = {
    /**
     * Select specific fields to fetch from the menu
     * 
    **/
    select?: menuSelect | null
  }



  /**
   * Model modifier
   */


  export type AggregateModifier = {
    _count: ModifierCountAggregateOutputType | null
    _avg: ModifierAvgAggregateOutputType | null
    _sum: ModifierSumAggregateOutputType | null
    _min: ModifierMinAggregateOutputType | null
    _max: ModifierMaxAggregateOutputType | null
  }

  export type ModifierAvgAggregateOutputType = {
    modifier_id: number | null
    shop_id: number | null
    menu_id: number | null
  }

  export type ModifierSumAggregateOutputType = {
    modifier_id: number | null
    shop_id: number | null
    menu_id: number | null
  }

  export type ModifierMinAggregateOutputType = {
    modifier_id: number | null
    shop_id: number | null
    menu_id: number | null
    name: string | null
    type: string | null
    class: string | null
    description: string | null
    ingredients: string | null
    created_on: Date | null
    last_modifiered: Date | null
  }

  export type ModifierMaxAggregateOutputType = {
    modifier_id: number | null
    shop_id: number | null
    menu_id: number | null
    name: string | null
    type: string | null
    class: string | null
    description: string | null
    ingredients: string | null
    created_on: Date | null
    last_modifiered: Date | null
  }

  export type ModifierCountAggregateOutputType = {
    modifier_id: number
    shop_id: number
    menu_id: number
    name: number
    type: number
    class: number
    description: number
    ingredients: number
    created_on: number
    last_modifiered: number
    _all: number
  }


  export type ModifierAvgAggregateInputType = {
    modifier_id?: true
    shop_id?: true
    menu_id?: true
  }

  export type ModifierSumAggregateInputType = {
    modifier_id?: true
    shop_id?: true
    menu_id?: true
  }

  export type ModifierMinAggregateInputType = {
    modifier_id?: true
    shop_id?: true
    menu_id?: true
    name?: true
    type?: true
    class?: true
    description?: true
    ingredients?: true
    created_on?: true
    last_modifiered?: true
  }

  export type ModifierMaxAggregateInputType = {
    modifier_id?: true
    shop_id?: true
    menu_id?: true
    name?: true
    type?: true
    class?: true
    description?: true
    ingredients?: true
    created_on?: true
    last_modifiered?: true
  }

  export type ModifierCountAggregateInputType = {
    modifier_id?: true
    shop_id?: true
    menu_id?: true
    name?: true
    type?: true
    class?: true
    description?: true
    ingredients?: true
    created_on?: true
    last_modifiered?: true
    _all?: true
  }

  export type ModifierAggregateArgs = {
    /**
     * Filter which modifier to aggregate.
     * 
    **/
    where?: modifierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modifiers to fetch.
     * 
    **/
    orderBy?: Enumerable<modifierOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: modifierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modifiers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modifiers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned modifiers
    **/
    _count?: true | ModifierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModifierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModifierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModifierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModifierMaxAggregateInputType
  }

  export type GetModifierAggregateType<T extends ModifierAggregateArgs> = {
        [P in keyof T & keyof AggregateModifier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModifier[P]>
      : GetScalarType<T[P], AggregateModifier[P]>
  }




  export type ModifierGroupByArgs = {
    where?: modifierWhereInput
    orderBy?: Enumerable<modifierOrderByWithAggregationInput>
    by: Array<ModifierScalarFieldEnum>
    having?: modifierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModifierCountAggregateInputType | true
    _avg?: ModifierAvgAggregateInputType
    _sum?: ModifierSumAggregateInputType
    _min?: ModifierMinAggregateInputType
    _max?: ModifierMaxAggregateInputType
  }


  export type ModifierGroupByOutputType = {
    modifier_id: number
    shop_id: number | null
    menu_id: number | null
    name: string | null
    type: string | null
    class: string | null
    description: string | null
    ingredients: string | null
    created_on: Date
    last_modifiered: Date | null
    _count: ModifierCountAggregateOutputType | null
    _avg: ModifierAvgAggregateOutputType | null
    _sum: ModifierSumAggregateOutputType | null
    _min: ModifierMinAggregateOutputType | null
    _max: ModifierMaxAggregateOutputType | null
  }

  type GetModifierGroupByPayload<T extends ModifierGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ModifierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModifierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModifierGroupByOutputType[P]>
            : GetScalarType<T[P], ModifierGroupByOutputType[P]>
        }
      >
    >


  export type modifierSelect = {
    modifier_id?: boolean
    shop_id?: boolean
    menu_id?: boolean
    name?: boolean
    type?: boolean
    class?: boolean
    description?: boolean
    ingredients?: boolean
    created_on?: boolean
    last_modifiered?: boolean
  }


  export type modifierGetPayload<S extends boolean | null | undefined | modifierArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? modifier :
    S extends undefined ? never :
    S extends { include: any } & (modifierArgs | modifierFindManyArgs)
    ? modifier 
    : S extends { select: any } & (modifierArgs | modifierFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof modifier ? modifier[P] : never
  } 
      : modifier


  type modifierCountArgs = Merge<
    Omit<modifierFindManyArgs, 'select' | 'include'> & {
      select?: ModifierCountAggregateInputType | true
    }
  >

  export interface modifierDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Modifier that matches the filter.
     * @param {modifierFindUniqueArgs} args - Arguments to find a Modifier
     * @example
     * // Get one Modifier
     * const modifier = await prisma.modifier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends modifierFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, modifierFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'modifier'> extends True ? Prisma__modifierClient<modifierGetPayload<T>> : Prisma__modifierClient<modifierGetPayload<T> | null, null>

    /**
     * Find one Modifier that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {modifierFindUniqueOrThrowArgs} args - Arguments to find a Modifier
     * @example
     * // Get one Modifier
     * const modifier = await prisma.modifier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends modifierFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, modifierFindUniqueOrThrowArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Find the first Modifier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modifierFindFirstArgs} args - Arguments to find a Modifier
     * @example
     * // Get one Modifier
     * const modifier = await prisma.modifier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends modifierFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, modifierFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'modifier'> extends True ? Prisma__modifierClient<modifierGetPayload<T>> : Prisma__modifierClient<modifierGetPayload<T> | null, null>

    /**
     * Find the first Modifier that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modifierFindFirstOrThrowArgs} args - Arguments to find a Modifier
     * @example
     * // Get one Modifier
     * const modifier = await prisma.modifier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends modifierFindFirstOrThrowArgs>(
      args?: SelectSubset<T, modifierFindFirstOrThrowArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Find zero or more Modifiers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modifierFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modifiers
     * const modifiers = await prisma.modifier.findMany()
     * 
     * // Get first 10 Modifiers
     * const modifiers = await prisma.modifier.findMany({ take: 10 })
     * 
     * // Only select the `modifier_id`
     * const modifierWithModifier_idOnly = await prisma.modifier.findMany({ select: { modifier_id: true } })
     * 
    **/
    findMany<T extends modifierFindManyArgs>(
      args?: SelectSubset<T, modifierFindManyArgs>
    ): PrismaPromise<Array<modifierGetPayload<T>>>

    /**
     * Create a Modifier.
     * @param {modifierCreateArgs} args - Arguments to create a Modifier.
     * @example
     * // Create one Modifier
     * const Modifier = await prisma.modifier.create({
     *   data: {
     *     // ... data to create a Modifier
     *   }
     * })
     * 
    **/
    create<T extends modifierCreateArgs>(
      args: SelectSubset<T, modifierCreateArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Create many Modifiers.
     *     @param {modifierCreateManyArgs} args - Arguments to create many Modifiers.
     *     @example
     *     // Create many Modifiers
     *     const modifier = await prisma.modifier.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends modifierCreateManyArgs>(
      args?: SelectSubset<T, modifierCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Modifier.
     * @param {modifierDeleteArgs} args - Arguments to delete one Modifier.
     * @example
     * // Delete one Modifier
     * const Modifier = await prisma.modifier.delete({
     *   where: {
     *     // ... filter to delete one Modifier
     *   }
     * })
     * 
    **/
    delete<T extends modifierDeleteArgs>(
      args: SelectSubset<T, modifierDeleteArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Update one Modifier.
     * @param {modifierUpdateArgs} args - Arguments to update one Modifier.
     * @example
     * // Update one Modifier
     * const modifier = await prisma.modifier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends modifierUpdateArgs>(
      args: SelectSubset<T, modifierUpdateArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Delete zero or more Modifiers.
     * @param {modifierDeleteManyArgs} args - Arguments to filter Modifiers to delete.
     * @example
     * // Delete a few Modifiers
     * const { count } = await prisma.modifier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends modifierDeleteManyArgs>(
      args?: SelectSubset<T, modifierDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modifiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modifierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modifiers
     * const modifier = await prisma.modifier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends modifierUpdateManyArgs>(
      args: SelectSubset<T, modifierUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Modifier.
     * @param {modifierUpsertArgs} args - Arguments to update or create a Modifier.
     * @example
     * // Update or create a Modifier
     * const modifier = await prisma.modifier.upsert({
     *   create: {
     *     // ... data to create a Modifier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Modifier we want to update
     *   }
     * })
    **/
    upsert<T extends modifierUpsertArgs>(
      args: SelectSubset<T, modifierUpsertArgs>
    ): Prisma__modifierClient<modifierGetPayload<T>>

    /**
     * Count the number of Modifiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {modifierCountArgs} args - Arguments to filter Modifiers to count.
     * @example
     * // Count the number of Modifiers
     * const count = await prisma.modifier.count({
     *   where: {
     *     // ... the filter for the Modifiers we want to count
     *   }
     * })
    **/
    count<T extends modifierCountArgs>(
      args?: Subset<T, modifierCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModifierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Modifier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModifierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModifierAggregateArgs>(args: Subset<T, ModifierAggregateArgs>): PrismaPromise<GetModifierAggregateType<T>>

    /**
     * Group by Modifier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModifierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModifierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModifierGroupByArgs['orderBy'] }
        : { orderBy?: ModifierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModifierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModifierGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for modifier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__modifierClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * modifier base type for findUnique actions
   */
  export type modifierFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter, which modifier to fetch.
     * 
    **/
    where: modifierWhereUniqueInput
  }

  /**
   * modifier findUnique
   */
  export interface modifierFindUniqueArgs extends modifierFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * modifier findUniqueOrThrow
   */
  export type modifierFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter, which modifier to fetch.
     * 
    **/
    where: modifierWhereUniqueInput
  }


  /**
   * modifier base type for findFirst actions
   */
  export type modifierFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter, which modifier to fetch.
     * 
    **/
    where?: modifierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modifiers to fetch.
     * 
    **/
    orderBy?: Enumerable<modifierOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modifiers.
     * 
    **/
    cursor?: modifierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modifiers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modifiers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modifiers.
     * 
    **/
    distinct?: Enumerable<ModifierScalarFieldEnum>
  }

  /**
   * modifier findFirst
   */
  export interface modifierFindFirstArgs extends modifierFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * modifier findFirstOrThrow
   */
  export type modifierFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter, which modifier to fetch.
     * 
    **/
    where?: modifierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modifiers to fetch.
     * 
    **/
    orderBy?: Enumerable<modifierOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modifiers.
     * 
    **/
    cursor?: modifierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modifiers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modifiers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modifiers.
     * 
    **/
    distinct?: Enumerable<ModifierScalarFieldEnum>
  }


  /**
   * modifier findMany
   */
  export type modifierFindManyArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter, which modifiers to fetch.
     * 
    **/
    where?: modifierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modifiers to fetch.
     * 
    **/
    orderBy?: Enumerable<modifierOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing modifiers.
     * 
    **/
    cursor?: modifierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modifiers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modifiers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ModifierScalarFieldEnum>
  }


  /**
   * modifier create
   */
  export type modifierCreateArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * The data needed to create a modifier.
     * 
    **/
    data: XOR<modifierCreateInput, modifierUncheckedCreateInput>
  }


  /**
   * modifier createMany
   */
  export type modifierCreateManyArgs = {
    /**
     * The data used to create many modifiers.
     * 
    **/
    data: Enumerable<modifierCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * modifier update
   */
  export type modifierUpdateArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * The data needed to update a modifier.
     * 
    **/
    data: XOR<modifierUpdateInput, modifierUncheckedUpdateInput>
    /**
     * Choose, which modifier to update.
     * 
    **/
    where: modifierWhereUniqueInput
  }


  /**
   * modifier updateMany
   */
  export type modifierUpdateManyArgs = {
    /**
     * The data used to update modifiers.
     * 
    **/
    data: XOR<modifierUpdateManyMutationInput, modifierUncheckedUpdateManyInput>
    /**
     * Filter which modifiers to update
     * 
    **/
    where?: modifierWhereInput
  }


  /**
   * modifier upsert
   */
  export type modifierUpsertArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * The filter to search for the modifier to update in case it exists.
     * 
    **/
    where: modifierWhereUniqueInput
    /**
     * In case the modifier found by the `where` argument doesn't exist, create a new modifier with this data.
     * 
    **/
    create: XOR<modifierCreateInput, modifierUncheckedCreateInput>
    /**
     * In case the modifier was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<modifierUpdateInput, modifierUncheckedUpdateInput>
  }


  /**
   * modifier delete
   */
  export type modifierDeleteArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
    /**
     * Filter which modifier to delete.
     * 
    **/
    where: modifierWhereUniqueInput
  }


  /**
   * modifier deleteMany
   */
  export type modifierDeleteManyArgs = {
    /**
     * Filter which modifiers to delete
     * 
    **/
    where?: modifierWhereInput
  }


  /**
   * modifier without action
   */
  export type modifierArgs = {
    /**
     * Select specific fields to fetch from the modifier
     * 
    **/
    select?: modifierSelect | null
  }



  /**
   * Model pass
   */


  export type AggregatePass = {
    _count: PassCountAggregateOutputType | null
    _avg: PassAvgAggregateOutputType | null
    _sum: PassSumAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  export type PassAvgAggregateOutputType = {
    pass_id: number | null
    shop_id: number | null
    pass_name: number | null
    active: number | null
    pass_base_price: number | null
    pass_base_price_frequency: number | null
    pass_payment_method: number | null
    pass_additional_pricing: number | null
    pass_other_options: number | null
    perk_item_1: number | null
    perk_item_2: number | null
    perk_item_3: number | null
    perk_item_4: number | null
    perk_item_5: number | null
    perk_item_6: number | null
    perk_item_7: number | null
    perk_item_8: number | null
    perk_item_9: number | null
    perk_item_10: number | null
    perk_item_11: number | null
    perk_item_12: number | null
    custom_perk_item_1: number | null
    custom_perk_item_2: number | null
    custom_perk_item_3: number | null
    custom_perk_item_4: number | null
    custom_perk_item_5: number | null
    custom_perk_item_6: number | null
    custom_perk_item_1_price: number | null
    custom_perk_item_2_price: number | null
    custom_perk_item_3_price: number | null
    custom_perk_item_4_price: number | null
    custom_perk_item_5_price: number | null
    custom_perk_item_6_price: number | null
    visible: number | null
    requirement_1: number | null
    requirement_2: number | null
    requirement_3: number | null
    requirement_4: number | null
    requirement_5: number | null
    requirement_6: number | null
    requirement_7: number | null
    requirement_8: number | null
    requirement_9: number | null
  }

  export type PassSumAggregateOutputType = {
    pass_id: number | null
    shop_id: number | null
    pass_name: number | null
    active: number | null
    pass_base_price: number | null
    pass_base_price_frequency: number | null
    pass_payment_method: number | null
    pass_additional_pricing: number | null
    pass_other_options: number | null
    perk_item_1: number | null
    perk_item_2: number | null
    perk_item_3: number | null
    perk_item_4: number | null
    perk_item_5: number | null
    perk_item_6: number | null
    perk_item_7: number | null
    perk_item_8: number | null
    perk_item_9: number | null
    perk_item_10: number | null
    perk_item_11: number | null
    perk_item_12: number | null
    custom_perk_item_1: number | null
    custom_perk_item_2: number | null
    custom_perk_item_3: number | null
    custom_perk_item_4: number | null
    custom_perk_item_5: number | null
    custom_perk_item_6: number | null
    custom_perk_item_1_price: number | null
    custom_perk_item_2_price: number | null
    custom_perk_item_3_price: number | null
    custom_perk_item_4_price: number | null
    custom_perk_item_5_price: number | null
    custom_perk_item_6_price: number | null
    visible: number | null
    requirement_1: number | null
    requirement_2: number | null
    requirement_3: number | null
    requirement_4: number | null
    requirement_5: number | null
    requirement_6: number | null
    requirement_7: number | null
    requirement_8: number | null
    requirement_9: number | null
  }

  export type PassMinAggregateOutputType = {
    pass_id: number | null
    shop_id: number | null
    pass_name: number | null
    pass_description: string | null
    created_on: Date | null
    last_modified: Date | null
    active: number | null
    pass_base_price: number | null
    pass_base_price_frequency: number | null
    pass_payment_method: number | null
    pass_additional_pricing: number | null
    pass_other_options: number | null
    pass_currency: string | null
    perk_item_1: number | null
    perk_item_2: number | null
    perk_item_3: number | null
    perk_item_4: number | null
    perk_item_5: number | null
    perk_item_6: number | null
    perk_item_7: number | null
    perk_item_8: number | null
    perk_item_9: number | null
    perk_item_10: number | null
    perk_item_11: number | null
    perk_item_12: number | null
    custom_perk_item_1: number | null
    custom_perk_item_2: number | null
    custom_perk_item_3: number | null
    custom_perk_item_4: number | null
    custom_perk_item_5: number | null
    custom_perk_item_6: number | null
    custom_perk_item_1_price: number | null
    custom_perk_item_2_price: number | null
    custom_perk_item_3_price: number | null
    custom_perk_item_4_price: number | null
    custom_perk_item_5_price: number | null
    custom_perk_item_6_price: number | null
    visible: number | null
    requirement_1: number | null
    requirement_2: number | null
    requirement_3: number | null
    requirement_4: number | null
    requirement_5: number | null
    requirement_6: number | null
    requirement_7: number | null
    requirement_8: number | null
    requirement_9: number | null
  }

  export type PassMaxAggregateOutputType = {
    pass_id: number | null
    shop_id: number | null
    pass_name: number | null
    pass_description: string | null
    created_on: Date | null
    last_modified: Date | null
    active: number | null
    pass_base_price: number | null
    pass_base_price_frequency: number | null
    pass_payment_method: number | null
    pass_additional_pricing: number | null
    pass_other_options: number | null
    pass_currency: string | null
    perk_item_1: number | null
    perk_item_2: number | null
    perk_item_3: number | null
    perk_item_4: number | null
    perk_item_5: number | null
    perk_item_6: number | null
    perk_item_7: number | null
    perk_item_8: number | null
    perk_item_9: number | null
    perk_item_10: number | null
    perk_item_11: number | null
    perk_item_12: number | null
    custom_perk_item_1: number | null
    custom_perk_item_2: number | null
    custom_perk_item_3: number | null
    custom_perk_item_4: number | null
    custom_perk_item_5: number | null
    custom_perk_item_6: number | null
    custom_perk_item_1_price: number | null
    custom_perk_item_2_price: number | null
    custom_perk_item_3_price: number | null
    custom_perk_item_4_price: number | null
    custom_perk_item_5_price: number | null
    custom_perk_item_6_price: number | null
    visible: number | null
    requirement_1: number | null
    requirement_2: number | null
    requirement_3: number | null
    requirement_4: number | null
    requirement_5: number | null
    requirement_6: number | null
    requirement_7: number | null
    requirement_8: number | null
    requirement_9: number | null
  }

  export type PassCountAggregateOutputType = {
    pass_id: number
    shop_id: number
    pass_name: number
    pass_description: number
    created_on: number
    last_modified: number
    active: number
    pass_base_price: number
    pass_base_price_frequency: number
    pass_payment_method: number
    pass_additional_pricing: number
    pass_other_options: number
    pass_currency: number
    perk_item_1: number
    perk_item_2: number
    perk_item_3: number
    perk_item_4: number
    perk_item_5: number
    perk_item_6: number
    perk_item_7: number
    perk_item_8: number
    perk_item_9: number
    perk_item_10: number
    perk_item_11: number
    perk_item_12: number
    custom_perk_item_1: number
    custom_perk_item_2: number
    custom_perk_item_3: number
    custom_perk_item_4: number
    custom_perk_item_5: number
    custom_perk_item_6: number
    custom_perk_item_1_price: number
    custom_perk_item_2_price: number
    custom_perk_item_3_price: number
    custom_perk_item_4_price: number
    custom_perk_item_5_price: number
    custom_perk_item_6_price: number
    visible: number
    requirement_1: number
    requirement_2: number
    requirement_3: number
    requirement_4: number
    requirement_5: number
    requirement_6: number
    requirement_7: number
    requirement_8: number
    requirement_9: number
    _all: number
  }


  export type PassAvgAggregateInputType = {
    pass_id?: true
    shop_id?: true
    pass_name?: true
    active?: true
    pass_base_price?: true
    pass_base_price_frequency?: true
    pass_payment_method?: true
    pass_additional_pricing?: true
    pass_other_options?: true
    perk_item_1?: true
    perk_item_2?: true
    perk_item_3?: true
    perk_item_4?: true
    perk_item_5?: true
    perk_item_6?: true
    perk_item_7?: true
    perk_item_8?: true
    perk_item_9?: true
    perk_item_10?: true
    perk_item_11?: true
    perk_item_12?: true
    custom_perk_item_1?: true
    custom_perk_item_2?: true
    custom_perk_item_3?: true
    custom_perk_item_4?: true
    custom_perk_item_5?: true
    custom_perk_item_6?: true
    custom_perk_item_1_price?: true
    custom_perk_item_2_price?: true
    custom_perk_item_3_price?: true
    custom_perk_item_4_price?: true
    custom_perk_item_5_price?: true
    custom_perk_item_6_price?: true
    visible?: true
    requirement_1?: true
    requirement_2?: true
    requirement_3?: true
    requirement_4?: true
    requirement_5?: true
    requirement_6?: true
    requirement_7?: true
    requirement_8?: true
    requirement_9?: true
  }

  export type PassSumAggregateInputType = {
    pass_id?: true
    shop_id?: true
    pass_name?: true
    active?: true
    pass_base_price?: true
    pass_base_price_frequency?: true
    pass_payment_method?: true
    pass_additional_pricing?: true
    pass_other_options?: true
    perk_item_1?: true
    perk_item_2?: true
    perk_item_3?: true
    perk_item_4?: true
    perk_item_5?: true
    perk_item_6?: true
    perk_item_7?: true
    perk_item_8?: true
    perk_item_9?: true
    perk_item_10?: true
    perk_item_11?: true
    perk_item_12?: true
    custom_perk_item_1?: true
    custom_perk_item_2?: true
    custom_perk_item_3?: true
    custom_perk_item_4?: true
    custom_perk_item_5?: true
    custom_perk_item_6?: true
    custom_perk_item_1_price?: true
    custom_perk_item_2_price?: true
    custom_perk_item_3_price?: true
    custom_perk_item_4_price?: true
    custom_perk_item_5_price?: true
    custom_perk_item_6_price?: true
    visible?: true
    requirement_1?: true
    requirement_2?: true
    requirement_3?: true
    requirement_4?: true
    requirement_5?: true
    requirement_6?: true
    requirement_7?: true
    requirement_8?: true
    requirement_9?: true
  }

  export type PassMinAggregateInputType = {
    pass_id?: true
    shop_id?: true
    pass_name?: true
    pass_description?: true
    created_on?: true
    last_modified?: true
    active?: true
    pass_base_price?: true
    pass_base_price_frequency?: true
    pass_payment_method?: true
    pass_additional_pricing?: true
    pass_other_options?: true
    pass_currency?: true
    perk_item_1?: true
    perk_item_2?: true
    perk_item_3?: true
    perk_item_4?: true
    perk_item_5?: true
    perk_item_6?: true
    perk_item_7?: true
    perk_item_8?: true
    perk_item_9?: true
    perk_item_10?: true
    perk_item_11?: true
    perk_item_12?: true
    custom_perk_item_1?: true
    custom_perk_item_2?: true
    custom_perk_item_3?: true
    custom_perk_item_4?: true
    custom_perk_item_5?: true
    custom_perk_item_6?: true
    custom_perk_item_1_price?: true
    custom_perk_item_2_price?: true
    custom_perk_item_3_price?: true
    custom_perk_item_4_price?: true
    custom_perk_item_5_price?: true
    custom_perk_item_6_price?: true
    visible?: true
    requirement_1?: true
    requirement_2?: true
    requirement_3?: true
    requirement_4?: true
    requirement_5?: true
    requirement_6?: true
    requirement_7?: true
    requirement_8?: true
    requirement_9?: true
  }

  export type PassMaxAggregateInputType = {
    pass_id?: true
    shop_id?: true
    pass_name?: true
    pass_description?: true
    created_on?: true
    last_modified?: true
    active?: true
    pass_base_price?: true
    pass_base_price_frequency?: true
    pass_payment_method?: true
    pass_additional_pricing?: true
    pass_other_options?: true
    pass_currency?: true
    perk_item_1?: true
    perk_item_2?: true
    perk_item_3?: true
    perk_item_4?: true
    perk_item_5?: true
    perk_item_6?: true
    perk_item_7?: true
    perk_item_8?: true
    perk_item_9?: true
    perk_item_10?: true
    perk_item_11?: true
    perk_item_12?: true
    custom_perk_item_1?: true
    custom_perk_item_2?: true
    custom_perk_item_3?: true
    custom_perk_item_4?: true
    custom_perk_item_5?: true
    custom_perk_item_6?: true
    custom_perk_item_1_price?: true
    custom_perk_item_2_price?: true
    custom_perk_item_3_price?: true
    custom_perk_item_4_price?: true
    custom_perk_item_5_price?: true
    custom_perk_item_6_price?: true
    visible?: true
    requirement_1?: true
    requirement_2?: true
    requirement_3?: true
    requirement_4?: true
    requirement_5?: true
    requirement_6?: true
    requirement_7?: true
    requirement_8?: true
    requirement_9?: true
  }

  export type PassCountAggregateInputType = {
    pass_id?: true
    shop_id?: true
    pass_name?: true
    pass_description?: true
    created_on?: true
    last_modified?: true
    active?: true
    pass_base_price?: true
    pass_base_price_frequency?: true
    pass_payment_method?: true
    pass_additional_pricing?: true
    pass_other_options?: true
    pass_currency?: true
    perk_item_1?: true
    perk_item_2?: true
    perk_item_3?: true
    perk_item_4?: true
    perk_item_5?: true
    perk_item_6?: true
    perk_item_7?: true
    perk_item_8?: true
    perk_item_9?: true
    perk_item_10?: true
    perk_item_11?: true
    perk_item_12?: true
    custom_perk_item_1?: true
    custom_perk_item_2?: true
    custom_perk_item_3?: true
    custom_perk_item_4?: true
    custom_perk_item_5?: true
    custom_perk_item_6?: true
    custom_perk_item_1_price?: true
    custom_perk_item_2_price?: true
    custom_perk_item_3_price?: true
    custom_perk_item_4_price?: true
    custom_perk_item_5_price?: true
    custom_perk_item_6_price?: true
    visible?: true
    requirement_1?: true
    requirement_2?: true
    requirement_3?: true
    requirement_4?: true
    requirement_5?: true
    requirement_6?: true
    requirement_7?: true
    requirement_8?: true
    requirement_9?: true
    _all?: true
  }

  export type PassAggregateArgs = {
    /**
     * Filter which pass to aggregate.
     * 
    **/
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     * 
    **/
    orderBy?: Enumerable<passOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned passes
    **/
    _count?: true | PassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassMaxAggregateInputType
  }

  export type GetPassAggregateType<T extends PassAggregateArgs> = {
        [P in keyof T & keyof AggregatePass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePass[P]>
      : GetScalarType<T[P], AggregatePass[P]>
  }




  export type PassGroupByArgs = {
    where?: passWhereInput
    orderBy?: Enumerable<passOrderByWithAggregationInput>
    by: Array<PassScalarFieldEnum>
    having?: passScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassCountAggregateInputType | true
    _avg?: PassAvgAggregateInputType
    _sum?: PassSumAggregateInputType
    _min?: PassMinAggregateInputType
    _max?: PassMaxAggregateInputType
  }


  export type PassGroupByOutputType = {
    pass_id: number
    shop_id: number
    pass_name: number
    pass_description: string | null
    created_on: Date
    last_modified: Date | null
    active: number
    pass_base_price: number | null
    pass_base_price_frequency: number | null
    pass_payment_method: number | null
    pass_additional_pricing: number | null
    pass_other_options: number | null
    pass_currency: string | null
    perk_item_1: number | null
    perk_item_2: number | null
    perk_item_3: number | null
    perk_item_4: number | null
    perk_item_5: number | null
    perk_item_6: number | null
    perk_item_7: number | null
    perk_item_8: number | null
    perk_item_9: number | null
    perk_item_10: number | null
    perk_item_11: number | null
    perk_item_12: number | null
    custom_perk_item_1: number | null
    custom_perk_item_2: number | null
    custom_perk_item_3: number | null
    custom_perk_item_4: number | null
    custom_perk_item_5: number | null
    custom_perk_item_6: number | null
    custom_perk_item_1_price: number | null
    custom_perk_item_2_price: number | null
    custom_perk_item_3_price: number | null
    custom_perk_item_4_price: number | null
    custom_perk_item_5_price: number | null
    custom_perk_item_6_price: number | null
    visible: number | null
    requirement_1: number | null
    requirement_2: number | null
    requirement_3: number | null
    requirement_4: number | null
    requirement_5: number | null
    requirement_6: number | null
    requirement_7: number | null
    requirement_8: number | null
    requirement_9: number | null
    _count: PassCountAggregateOutputType | null
    _avg: PassAvgAggregateOutputType | null
    _sum: PassSumAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  type GetPassGroupByPayload<T extends PassGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassGroupByOutputType[P]>
            : GetScalarType<T[P], PassGroupByOutputType[P]>
        }
      >
    >


  export type passSelect = {
    pass_id?: boolean
    shop_id?: boolean
    pass_name?: boolean
    pass_description?: boolean
    created_on?: boolean
    last_modified?: boolean
    active?: boolean
    pass_base_price?: boolean
    pass_base_price_frequency?: boolean
    pass_payment_method?: boolean
    pass_additional_pricing?: boolean
    pass_other_options?: boolean
    pass_currency?: boolean
    perk_item_1?: boolean
    perk_item_2?: boolean
    perk_item_3?: boolean
    perk_item_4?: boolean
    perk_item_5?: boolean
    perk_item_6?: boolean
    perk_item_7?: boolean
    perk_item_8?: boolean
    perk_item_9?: boolean
    perk_item_10?: boolean
    perk_item_11?: boolean
    perk_item_12?: boolean
    custom_perk_item_1?: boolean
    custom_perk_item_2?: boolean
    custom_perk_item_3?: boolean
    custom_perk_item_4?: boolean
    custom_perk_item_5?: boolean
    custom_perk_item_6?: boolean
    custom_perk_item_1_price?: boolean
    custom_perk_item_2_price?: boolean
    custom_perk_item_3_price?: boolean
    custom_perk_item_4_price?: boolean
    custom_perk_item_5_price?: boolean
    custom_perk_item_6_price?: boolean
    visible?: boolean
    requirement_1?: boolean
    requirement_2?: boolean
    requirement_3?: boolean
    requirement_4?: boolean
    requirement_5?: boolean
    requirement_6?: boolean
    requirement_7?: boolean
    requirement_8?: boolean
    requirement_9?: boolean
  }


  export type passGetPayload<S extends boolean | null | undefined | passArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? pass :
    S extends undefined ? never :
    S extends { include: any } & (passArgs | passFindManyArgs)
    ? pass 
    : S extends { select: any } & (passArgs | passFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof pass ? pass[P] : never
  } 
      : pass


  type passCountArgs = Merge<
    Omit<passFindManyArgs, 'select' | 'include'> & {
      select?: PassCountAggregateInputType | true
    }
  >

  export interface passDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Pass that matches the filter.
     * @param {passFindUniqueArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends passFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, passFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pass'> extends True ? Prisma__passClient<passGetPayload<T>> : Prisma__passClient<passGetPayload<T> | null, null>

    /**
     * Find one Pass that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {passFindUniqueOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends passFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, passFindUniqueOrThrowArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Find the first Pass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindFirstArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends passFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, passFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pass'> extends True ? Prisma__passClient<passGetPayload<T>> : Prisma__passClient<passGetPayload<T> | null, null>

    /**
     * Find the first Pass that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindFirstOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends passFindFirstOrThrowArgs>(
      args?: SelectSubset<T, passFindFirstOrThrowArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Find zero or more Passes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passes
     * const passes = await prisma.pass.findMany()
     * 
     * // Get first 10 Passes
     * const passes = await prisma.pass.findMany({ take: 10 })
     * 
     * // Only select the `pass_id`
     * const passWithPass_idOnly = await prisma.pass.findMany({ select: { pass_id: true } })
     * 
    **/
    findMany<T extends passFindManyArgs>(
      args?: SelectSubset<T, passFindManyArgs>
    ): PrismaPromise<Array<passGetPayload<T>>>

    /**
     * Create a Pass.
     * @param {passCreateArgs} args - Arguments to create a Pass.
     * @example
     * // Create one Pass
     * const Pass = await prisma.pass.create({
     *   data: {
     *     // ... data to create a Pass
     *   }
     * })
     * 
    **/
    create<T extends passCreateArgs>(
      args: SelectSubset<T, passCreateArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Create many Passes.
     *     @param {passCreateManyArgs} args - Arguments to create many Passes.
     *     @example
     *     // Create many Passes
     *     const pass = await prisma.pass.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends passCreateManyArgs>(
      args?: SelectSubset<T, passCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pass.
     * @param {passDeleteArgs} args - Arguments to delete one Pass.
     * @example
     * // Delete one Pass
     * const Pass = await prisma.pass.delete({
     *   where: {
     *     // ... filter to delete one Pass
     *   }
     * })
     * 
    **/
    delete<T extends passDeleteArgs>(
      args: SelectSubset<T, passDeleteArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Update one Pass.
     * @param {passUpdateArgs} args - Arguments to update one Pass.
     * @example
     * // Update one Pass
     * const pass = await prisma.pass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends passUpdateArgs>(
      args: SelectSubset<T, passUpdateArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Delete zero or more Passes.
     * @param {passDeleteManyArgs} args - Arguments to filter Passes to delete.
     * @example
     * // Delete a few Passes
     * const { count } = await prisma.pass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends passDeleteManyArgs>(
      args?: SelectSubset<T, passDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passes
     * const pass = await prisma.pass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends passUpdateManyArgs>(
      args: SelectSubset<T, passUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pass.
     * @param {passUpsertArgs} args - Arguments to update or create a Pass.
     * @example
     * // Update or create a Pass
     * const pass = await prisma.pass.upsert({
     *   create: {
     *     // ... data to create a Pass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pass we want to update
     *   }
     * })
    **/
    upsert<T extends passUpsertArgs>(
      args: SelectSubset<T, passUpsertArgs>
    ): Prisma__passClient<passGetPayload<T>>

    /**
     * Count the number of Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passCountArgs} args - Arguments to filter Passes to count.
     * @example
     * // Count the number of Passes
     * const count = await prisma.pass.count({
     *   where: {
     *     // ... the filter for the Passes we want to count
     *   }
     * })
    **/
    count<T extends passCountArgs>(
      args?: Subset<T, passCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassAggregateArgs>(args: Subset<T, PassAggregateArgs>): PrismaPromise<GetPassAggregateType<T>>

    /**
     * Group by Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassGroupByArgs['orderBy'] }
        : { orderBy?: PassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__passClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pass base type for findUnique actions
   */
  export type passFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter, which pass to fetch.
     * 
    **/
    where: passWhereUniqueInput
  }

  /**
   * pass findUnique
   */
  export interface passFindUniqueArgs extends passFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pass findUniqueOrThrow
   */
  export type passFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter, which pass to fetch.
     * 
    **/
    where: passWhereUniqueInput
  }


  /**
   * pass base type for findFirst actions
   */
  export type passFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter, which pass to fetch.
     * 
    **/
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     * 
    **/
    orderBy?: Enumerable<passOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passes.
     * 
    **/
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passes.
     * 
    **/
    distinct?: Enumerable<PassScalarFieldEnum>
  }

  /**
   * pass findFirst
   */
  export interface passFindFirstArgs extends passFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pass findFirstOrThrow
   */
  export type passFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter, which pass to fetch.
     * 
    **/
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     * 
    **/
    orderBy?: Enumerable<passOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passes.
     * 
    **/
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passes.
     * 
    **/
    distinct?: Enumerable<PassScalarFieldEnum>
  }


  /**
   * pass findMany
   */
  export type passFindManyArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter, which passes to fetch.
     * 
    **/
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     * 
    **/
    orderBy?: Enumerable<passOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing passes.
     * 
    **/
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PassScalarFieldEnum>
  }


  /**
   * pass create
   */
  export type passCreateArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * The data needed to create a pass.
     * 
    **/
    data: XOR<passCreateInput, passUncheckedCreateInput>
  }


  /**
   * pass createMany
   */
  export type passCreateManyArgs = {
    /**
     * The data used to create many passes.
     * 
    **/
    data: Enumerable<passCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pass update
   */
  export type passUpdateArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * The data needed to update a pass.
     * 
    **/
    data: XOR<passUpdateInput, passUncheckedUpdateInput>
    /**
     * Choose, which pass to update.
     * 
    **/
    where: passWhereUniqueInput
  }


  /**
   * pass updateMany
   */
  export type passUpdateManyArgs = {
    /**
     * The data used to update passes.
     * 
    **/
    data: XOR<passUpdateManyMutationInput, passUncheckedUpdateManyInput>
    /**
     * Filter which passes to update
     * 
    **/
    where?: passWhereInput
  }


  /**
   * pass upsert
   */
  export type passUpsertArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * The filter to search for the pass to update in case it exists.
     * 
    **/
    where: passWhereUniqueInput
    /**
     * In case the pass found by the `where` argument doesn't exist, create a new pass with this data.
     * 
    **/
    create: XOR<passCreateInput, passUncheckedCreateInput>
    /**
     * In case the pass was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<passUpdateInput, passUncheckedUpdateInput>
  }


  /**
   * pass delete
   */
  export type passDeleteArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
    /**
     * Filter which pass to delete.
     * 
    **/
    where: passWhereUniqueInput
  }


  /**
   * pass deleteMany
   */
  export type passDeleteManyArgs = {
    /**
     * Filter which passes to delete
     * 
    **/
    where?: passWhereInput
  }


  /**
   * pass without action
   */
  export type passArgs = {
    /**
     * Select specific fields to fetch from the pass
     * 
    **/
    select?: passSelect | null
  }



  /**
   * Model shop
   */


  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    shop_id: number | null
    availability_1: number | null
    availability_2: number | null
    availability_3: number | null
    availability_4: number | null
    availability_5: number | null
    availability_6: number | null
    availability_7: number | null
    active: number | null
    shop_fee: number | null
    shop_pay_frquency: number | null
  }

  export type ShopSumAggregateOutputType = {
    shop_id: number | null
    availability_1: number[] | null
    availability_2: number[] | null
    availability_3: number[] | null
    availability_4: number[] | null
    availability_5: number[] | null
    availability_6: number[] | null
    availability_7: number[] | null
    active: number | null
    shop_fee: number | null
    shop_pay_frquency: number | null
  }

  export type ShopMinAggregateOutputType = {
    shop_id: number | null
    shop_name: string | null
    shop_description: string | null
    shop_address: string | null
    shop_phone_number: string | null
    shop_email: string | null
    shop_owner_name: string | null
    created_on: Date | null
    last_modified: Date | null
    active: number | null
    shop_fee: number | null
    shop_pay_frquency: number | null
    shop_pay_date: Date | null
  }

  export type ShopMaxAggregateOutputType = {
    shop_id: number | null
    shop_name: string | null
    shop_description: string | null
    shop_address: string | null
    shop_phone_number: string | null
    shop_email: string | null
    shop_owner_name: string | null
    created_on: Date | null
    last_modified: Date | null
    active: number | null
    shop_fee: number | null
    shop_pay_frquency: number | null
    shop_pay_date: Date | null
  }

  export type ShopCountAggregateOutputType = {
    shop_id: number
    shop_name: number
    shop_description: number
    shop_address: number
    shop_phone_number: number
    shop_email: number
    shop_owner_name: number
    created_on: number
    last_modified: number
    availability_1: number
    availability_2: number
    availability_3: number
    availability_4: number
    availability_5: number
    availability_6: number
    availability_7: number
    active: number
    shop_fee: number
    shop_pay_frquency: number
    shop_pay_date: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    shop_id?: true
    availability_1?: true
    availability_2?: true
    availability_3?: true
    availability_4?: true
    availability_5?: true
    availability_6?: true
    availability_7?: true
    active?: true
    shop_fee?: true
    shop_pay_frquency?: true
  }

  export type ShopSumAggregateInputType = {
    shop_id?: true
    availability_1?: true
    availability_2?: true
    availability_3?: true
    availability_4?: true
    availability_5?: true
    availability_6?: true
    availability_7?: true
    active?: true
    shop_fee?: true
    shop_pay_frquency?: true
  }

  export type ShopMinAggregateInputType = {
    shop_id?: true
    shop_name?: true
    shop_description?: true
    shop_address?: true
    shop_phone_number?: true
    shop_email?: true
    shop_owner_name?: true
    created_on?: true
    last_modified?: true
    active?: true
    shop_fee?: true
    shop_pay_frquency?: true
    shop_pay_date?: true
  }

  export type ShopMaxAggregateInputType = {
    shop_id?: true
    shop_name?: true
    shop_description?: true
    shop_address?: true
    shop_phone_number?: true
    shop_email?: true
    shop_owner_name?: true
    created_on?: true
    last_modified?: true
    active?: true
    shop_fee?: true
    shop_pay_frquency?: true
    shop_pay_date?: true
  }

  export type ShopCountAggregateInputType = {
    shop_id?: true
    shop_name?: true
    shop_description?: true
    shop_address?: true
    shop_phone_number?: true
    shop_email?: true
    shop_owner_name?: true
    created_on?: true
    last_modified?: true
    availability_1?: true
    availability_2?: true
    availability_3?: true
    availability_4?: true
    availability_5?: true
    availability_6?: true
    availability_7?: true
    active?: true
    shop_fee?: true
    shop_pay_frquency?: true
    shop_pay_date?: true
    _all?: true
  }

  export type ShopAggregateArgs = {
    /**
     * Filter which shop to aggregate.
     * 
    **/
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     * 
    **/
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs = {
    where?: shopWhereInput
    orderBy?: Enumerable<shopOrderByWithAggregationInput>
    by: Array<ShopScalarFieldEnum>
    having?: shopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }


  export type ShopGroupByOutputType = {
    shop_id: number
    shop_name: string | null
    shop_description: string | null
    shop_address: string | null
    shop_phone_number: string | null
    shop_email: string | null
    shop_owner_name: string | null
    created_on: Date
    last_modified: Date | null
    availability_1: number[]
    availability_2: number[]
    availability_3: number[]
    availability_4: number[]
    availability_5: number[]
    availability_6: number[]
    availability_7: number[]
    active: number | null
    shop_fee: number | null
    shop_pay_frquency: number | null
    shop_pay_date: Date | null
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type shopSelect = {
    shop_id?: boolean
    shop_name?: boolean
    shop_description?: boolean
    shop_address?: boolean
    shop_phone_number?: boolean
    shop_email?: boolean
    shop_owner_name?: boolean
    created_on?: boolean
    last_modified?: boolean
    availability_1?: boolean
    availability_2?: boolean
    availability_3?: boolean
    availability_4?: boolean
    availability_5?: boolean
    availability_6?: boolean
    availability_7?: boolean
    active?: boolean
    shop_fee?: boolean
    shop_pay_frquency?: boolean
    shop_pay_date?: boolean
  }


  export type shopGetPayload<S extends boolean | null | undefined | shopArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? shop :
    S extends undefined ? never :
    S extends { include: any } & (shopArgs | shopFindManyArgs)
    ? shop 
    : S extends { select: any } & (shopArgs | shopFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof shop ? shop[P] : never
  } 
      : shop


  type shopCountArgs = Merge<
    Omit<shopFindManyArgs, 'select' | 'include'> & {
      select?: ShopCountAggregateInputType | true
    }
  >

  export interface shopDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Shop that matches the filter.
     * @param {shopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, shopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'shop'> extends True ? Prisma__shopClient<shopGetPayload<T>> : Prisma__shopClient<shopGetPayload<T> | null, null>

    /**
     * Find one Shop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shopFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, shopFindUniqueOrThrowArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, shopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'shop'> extends True ? Prisma__shopClient<shopGetPayload<T>> : Prisma__shopClient<shopGetPayload<T> | null, null>

    /**
     * Find the first Shop that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shopFindFirstOrThrowArgs>(
      args?: SelectSubset<T, shopFindFirstOrThrowArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `shop_id`
     * const shopWithShop_idOnly = await prisma.shop.findMany({ select: { shop_id: true } })
     * 
    **/
    findMany<T extends shopFindManyArgs>(
      args?: SelectSubset<T, shopFindManyArgs>
    ): PrismaPromise<Array<shopGetPayload<T>>>

    /**
     * Create a Shop.
     * @param {shopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends shopCreateArgs>(
      args: SelectSubset<T, shopCreateArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Create many Shops.
     *     @param {shopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shopCreateManyArgs>(
      args?: SelectSubset<T, shopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {shopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends shopDeleteArgs>(
      args: SelectSubset<T, shopDeleteArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Update one Shop.
     * @param {shopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shopUpdateArgs>(
      args: SelectSubset<T, shopUpdateArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Delete zero or more Shops.
     * @param {shopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shopDeleteManyArgs>(
      args?: SelectSubset<T, shopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shopUpdateManyArgs>(
      args: SelectSubset<T, shopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {shopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends shopUpsertArgs>(
      args: SelectSubset<T, shopUpsertArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends shopCountArgs>(
      args?: Subset<T, shopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__shopClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * shop base type for findUnique actions
   */
  export type shopFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter, which shop to fetch.
     * 
    **/
    where: shopWhereUniqueInput
  }

  /**
   * shop findUnique
   */
  export interface shopFindUniqueArgs extends shopFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shop findUniqueOrThrow
   */
  export type shopFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter, which shop to fetch.
     * 
    **/
    where: shopWhereUniqueInput
  }


  /**
   * shop base type for findFirst actions
   */
  export type shopFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter, which shop to fetch.
     * 
    **/
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     * 
    **/
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shops.
     * 
    **/
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shops.
     * 
    **/
    distinct?: Enumerable<ShopScalarFieldEnum>
  }

  /**
   * shop findFirst
   */
  export interface shopFindFirstArgs extends shopFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shop findFirstOrThrow
   */
  export type shopFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter, which shop to fetch.
     * 
    **/
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     * 
    **/
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shops.
     * 
    **/
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shops.
     * 
    **/
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * shop findMany
   */
  export type shopFindManyArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter, which shops to fetch.
     * 
    **/
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     * 
    **/
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shops.
     * 
    **/
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * shop create
   */
  export type shopCreateArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * The data needed to create a shop.
     * 
    **/
    data: XOR<shopCreateInput, shopUncheckedCreateInput>
  }


  /**
   * shop createMany
   */
  export type shopCreateManyArgs = {
    /**
     * The data used to create many shops.
     * 
    **/
    data: Enumerable<shopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * shop update
   */
  export type shopUpdateArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * The data needed to update a shop.
     * 
    **/
    data: XOR<shopUpdateInput, shopUncheckedUpdateInput>
    /**
     * Choose, which shop to update.
     * 
    **/
    where: shopWhereUniqueInput
  }


  /**
   * shop updateMany
   */
  export type shopUpdateManyArgs = {
    /**
     * The data used to update shops.
     * 
    **/
    data: XOR<shopUpdateManyMutationInput, shopUncheckedUpdateManyInput>
    /**
     * Filter which shops to update
     * 
    **/
    where?: shopWhereInput
  }


  /**
   * shop upsert
   */
  export type shopUpsertArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * The filter to search for the shop to update in case it exists.
     * 
    **/
    where: shopWhereUniqueInput
    /**
     * In case the shop found by the `where` argument doesn't exist, create a new shop with this data.
     * 
    **/
    create: XOR<shopCreateInput, shopUncheckedCreateInput>
    /**
     * In case the shop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<shopUpdateInput, shopUncheckedUpdateInput>
  }


  /**
   * shop delete
   */
  export type shopDeleteArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
    /**
     * Filter which shop to delete.
     * 
    **/
    where: shopWhereUniqueInput
  }


  /**
   * shop deleteMany
   */
  export type shopDeleteManyArgs = {
    /**
     * Filter which shops to delete
     * 
    **/
    where?: shopWhereInput
  }


  /**
   * shop without action
   */
  export type shopArgs = {
    /**
     * Select specific fields to fetch from the shop
     * 
    **/
    select?: shopSelect | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    is_shop: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    is_shop: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    is_shop: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    is_shop: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    is_shop: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    is_shop?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    is_shop?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    is_shop?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    is_shop?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    is_shop?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    is_shop: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    is_shop?: boolean
  }


  export type userGetPayload<S extends boolean | null | undefined | userArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user :
    S extends undefined ? never :
    S extends { include: any } & (userArgs | userFindManyArgs)
    ? user 
    : S extends { select: any } & (userArgs | userFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof user ? user[P] : never
  } 
      : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): PrismaPromise<Array<userGetPayload<T>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CustomerScalarFieldEnum: {
    customer_id: 'customer_id',
    full_name: 'full_name',
    email: 'email',
    passowrd: 'passowrd',
    date_of_birth: 'date_of_birth',
    language: 'language',
    city: 'city',
    membership_status: 'membership_status',
    created_on: 'created_on',
    last_modifier: 'last_modifier',
    last_login: 'last_login',
    user_id: 'user_id'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    member_id: 'member_id',
    user_id: 'user_id',
    shop_id: 'shop_id'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    user_id: 'user_id',
    creation_on: 'creation_on',
    subscribed_on: 'subscribed_on',
    active: 'active',
    total_redemptions: 'total_redemptions',
    remaining_redemptions: 'remaining_redemptions',
    refill_frequency: 'refill_frequency',
    last_refill: 'last_refill',
    last_modifiered: 'last_modifiered',
    membership_id: 'membership_id',
    pass_id: 'pass_id'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const MenuScalarFieldEnum: {
    menu_id: 'menu_id',
    shop_id: 'shop_id',
    name: 'name',
    description: 'description',
    created_on: 'created_on',
    last_modified: 'last_modified',
    modifier_1: 'modifier_1',
    modifier_2: 'modifier_2',
    modifier_3: 'modifier_3',
    modifier_4: 'modifier_4',
    modifier_5: 'modifier_5'
  };

  export type MenuScalarFieldEnum = (typeof MenuScalarFieldEnum)[keyof typeof MenuScalarFieldEnum]


  export const ModifierScalarFieldEnum: {
    modifier_id: 'modifier_id',
    shop_id: 'shop_id',
    menu_id: 'menu_id',
    name: 'name',
    type: 'type',
    class: 'class',
    description: 'description',
    ingredients: 'ingredients',
    created_on: 'created_on',
    last_modifiered: 'last_modifiered'
  };

  export type ModifierScalarFieldEnum = (typeof ModifierScalarFieldEnum)[keyof typeof ModifierScalarFieldEnum]


  export const PassScalarFieldEnum: {
    pass_id: 'pass_id',
    shop_id: 'shop_id',
    pass_name: 'pass_name',
    pass_description: 'pass_description',
    created_on: 'created_on',
    last_modified: 'last_modified',
    active: 'active',
    pass_base_price: 'pass_base_price',
    pass_base_price_frequency: 'pass_base_price_frequency',
    pass_payment_method: 'pass_payment_method',
    pass_additional_pricing: 'pass_additional_pricing',
    pass_other_options: 'pass_other_options',
    pass_currency: 'pass_currency',
    perk_item_1: 'perk_item_1',
    perk_item_2: 'perk_item_2',
    perk_item_3: 'perk_item_3',
    perk_item_4: 'perk_item_4',
    perk_item_5: 'perk_item_5',
    perk_item_6: 'perk_item_6',
    perk_item_7: 'perk_item_7',
    perk_item_8: 'perk_item_8',
    perk_item_9: 'perk_item_9',
    perk_item_10: 'perk_item_10',
    perk_item_11: 'perk_item_11',
    perk_item_12: 'perk_item_12',
    custom_perk_item_1: 'custom_perk_item_1',
    custom_perk_item_2: 'custom_perk_item_2',
    custom_perk_item_3: 'custom_perk_item_3',
    custom_perk_item_4: 'custom_perk_item_4',
    custom_perk_item_5: 'custom_perk_item_5',
    custom_perk_item_6: 'custom_perk_item_6',
    custom_perk_item_1_price: 'custom_perk_item_1_price',
    custom_perk_item_2_price: 'custom_perk_item_2_price',
    custom_perk_item_3_price: 'custom_perk_item_3_price',
    custom_perk_item_4_price: 'custom_perk_item_4_price',
    custom_perk_item_5_price: 'custom_perk_item_5_price',
    custom_perk_item_6_price: 'custom_perk_item_6_price',
    visible: 'visible',
    requirement_1: 'requirement_1',
    requirement_2: 'requirement_2',
    requirement_3: 'requirement_3',
    requirement_4: 'requirement_4',
    requirement_5: 'requirement_5',
    requirement_6: 'requirement_6',
    requirement_7: 'requirement_7',
    requirement_8: 'requirement_8',
    requirement_9: 'requirement_9'
  };

  export type PassScalarFieldEnum = (typeof PassScalarFieldEnum)[keyof typeof PassScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ShopScalarFieldEnum: {
    shop_id: 'shop_id',
    shop_name: 'shop_name',
    shop_description: 'shop_description',
    shop_address: 'shop_address',
    shop_phone_number: 'shop_phone_number',
    shop_email: 'shop_email',
    shop_owner_name: 'shop_owner_name',
    created_on: 'created_on',
    last_modified: 'last_modified',
    availability_1: 'availability_1',
    availability_2: 'availability_2',
    availability_3: 'availability_3',
    availability_4: 'availability_4',
    availability_5: 'availability_5',
    availability_6: 'availability_6',
    availability_7: 'availability_7',
    active: 'active',
    shop_fee: 'shop_fee',
    shop_pay_frquency: 'shop_pay_frquency',
    shop_pay_date: 'shop_pay_date'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    is_shop: 'is_shop'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type customerWhereInput = {
    AND?: Enumerable<customerWhereInput>
    OR?: Enumerable<customerWhereInput>
    NOT?: Enumerable<customerWhereInput>
    customer_id?: IntFilter | number
    full_name?: StringFilter | string
    email?: StringFilter | string
    passowrd?: StringFilter | string
    date_of_birth?: StringFilter | string
    language?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    membership_status?: StringNullableFilter | string | null
    created_on?: DateTimeFilter | Date | string
    last_modifier?: DateTimeNullableFilter | Date | string | null
    last_login?: DateTimeNullableFilter | Date | string | null
    user_id?: IntNullableFilter | number | null
  }

  export type customerOrderByWithRelationInput = {
    customer_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    passowrd?: SortOrder
    date_of_birth?: SortOrder
    language?: SortOrder
    city?: SortOrder
    membership_status?: SortOrder
    created_on?: SortOrder
    last_modifier?: SortOrder
    last_login?: SortOrder
    user_id?: SortOrder
  }

  export type customerWhereUniqueInput = {
    customer_id?: number
  }

  export type customerOrderByWithAggregationInput = {
    customer_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    passowrd?: SortOrder
    date_of_birth?: SortOrder
    language?: SortOrder
    city?: SortOrder
    membership_status?: SortOrder
    created_on?: SortOrder
    last_modifier?: SortOrder
    last_login?: SortOrder
    user_id?: SortOrder
    _count?: customerCountOrderByAggregateInput
    _avg?: customerAvgOrderByAggregateInput
    _max?: customerMaxOrderByAggregateInput
    _min?: customerMinOrderByAggregateInput
    _sum?: customerSumOrderByAggregateInput
  }

  export type customerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customerScalarWhereWithAggregatesInput>
    OR?: Enumerable<customerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customerScalarWhereWithAggregatesInput>
    customer_id?: IntWithAggregatesFilter | number
    full_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    passowrd?: StringWithAggregatesFilter | string
    date_of_birth?: StringWithAggregatesFilter | string
    language?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    membership_status?: StringNullableWithAggregatesFilter | string | null
    created_on?: DateTimeWithAggregatesFilter | Date | string
    last_modifier?: DateTimeNullableWithAggregatesFilter | Date | string | null
    last_login?: DateTimeNullableWithAggregatesFilter | Date | string | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type memberWhereInput = {
    AND?: Enumerable<memberWhereInput>
    OR?: Enumerable<memberWhereInput>
    NOT?: Enumerable<memberWhereInput>
    member_id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    shop_id?: IntNullableFilter | number | null
  }

  export type memberOrderByWithRelationInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type memberWhereUniqueInput = {
    member_id?: number
  }

  export type memberOrderByWithAggregationInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
    _count?: memberCountOrderByAggregateInput
    _avg?: memberAvgOrderByAggregateInput
    _max?: memberMaxOrderByAggregateInput
    _min?: memberMinOrderByAggregateInput
    _sum?: memberSumOrderByAggregateInput
  }

  export type memberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<memberScalarWhereWithAggregatesInput>
    OR?: Enumerable<memberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<memberScalarWhereWithAggregatesInput>
    member_id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
    shop_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type membershipWhereInput = {
    AND?: Enumerable<membershipWhereInput>
    OR?: Enumerable<membershipWhereInput>
    NOT?: Enumerable<membershipWhereInput>
    user_id?: IntNullableFilter | number | null
    creation_on?: DateTimeFilter | Date | string
    subscribed_on?: DateTimeFilter | Date | string
    active?: IntFilter | number
    total_redemptions?: IntFilter | number
    remaining_redemptions?: IntFilter | number
    refill_frequency?: IntNullableFilter | number | null
    last_refill?: DateTimeNullableFilter | Date | string | null
    last_modifiered?: DateTimeNullableFilter | Date | string | null
    membership_id?: IntFilter | number
    pass_id?: IntNullableFilter | number | null
  }

  export type membershipOrderByWithRelationInput = {
    user_id?: SortOrder
    creation_on?: SortOrder
    subscribed_on?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    last_refill?: SortOrder
    last_modifiered?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type membershipWhereUniqueInput = {
    membership_id?: number
  }

  export type membershipOrderByWithAggregationInput = {
    user_id?: SortOrder
    creation_on?: SortOrder
    subscribed_on?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    last_refill?: SortOrder
    last_modifiered?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
    _count?: membershipCountOrderByAggregateInput
    _avg?: membershipAvgOrderByAggregateInput
    _max?: membershipMaxOrderByAggregateInput
    _min?: membershipMinOrderByAggregateInput
    _sum?: membershipSumOrderByAggregateInput
  }

  export type membershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<membershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<membershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<membershipScalarWhereWithAggregatesInput>
    user_id?: IntNullableWithAggregatesFilter | number | null
    creation_on?: DateTimeWithAggregatesFilter | Date | string
    subscribed_on?: DateTimeWithAggregatesFilter | Date | string
    active?: IntWithAggregatesFilter | number
    total_redemptions?: IntWithAggregatesFilter | number
    remaining_redemptions?: IntWithAggregatesFilter | number
    refill_frequency?: IntNullableWithAggregatesFilter | number | null
    last_refill?: DateTimeNullableWithAggregatesFilter | Date | string | null
    last_modifiered?: DateTimeNullableWithAggregatesFilter | Date | string | null
    membership_id?: IntWithAggregatesFilter | number
    pass_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type menuWhereInput = {
    AND?: Enumerable<menuWhereInput>
    OR?: Enumerable<menuWhereInput>
    NOT?: Enumerable<menuWhereInput>
    menu_id?: IntFilter | number
    shop_id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    created_on?: DateTimeFilter | Date | string
    last_modified?: DateTimeNullableFilter | Date | string | null
    modifier_1?: IntNullableFilter | number | null
    modifier_2?: IntNullableFilter | number | null
    modifier_3?: IntNullableFilter | number | null
    modifier_4?: IntNullableFilter | number | null
    modifier_5?: IntNullableFilter | number | null
  }

  export type menuOrderByWithRelationInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type menuWhereUniqueInput = {
    menu_id?: number
  }

  export type menuOrderByWithAggregationInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
    _count?: menuCountOrderByAggregateInput
    _avg?: menuAvgOrderByAggregateInput
    _max?: menuMaxOrderByAggregateInput
    _min?: menuMinOrderByAggregateInput
    _sum?: menuSumOrderByAggregateInput
  }

  export type menuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<menuScalarWhereWithAggregatesInput>
    OR?: Enumerable<menuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<menuScalarWhereWithAggregatesInput>
    menu_id?: IntWithAggregatesFilter | number
    shop_id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    created_on?: DateTimeWithAggregatesFilter | Date | string
    last_modified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    modifier_1?: IntNullableWithAggregatesFilter | number | null
    modifier_2?: IntNullableWithAggregatesFilter | number | null
    modifier_3?: IntNullableWithAggregatesFilter | number | null
    modifier_4?: IntNullableWithAggregatesFilter | number | null
    modifier_5?: IntNullableWithAggregatesFilter | number | null
  }

  export type modifierWhereInput = {
    AND?: Enumerable<modifierWhereInput>
    OR?: Enumerable<modifierWhereInput>
    NOT?: Enumerable<modifierWhereInput>
    modifier_id?: IntFilter | number
    shop_id?: IntNullableFilter | number | null
    menu_id?: IntNullableFilter | number | null
    name?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    class?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    ingredients?: StringNullableFilter | string | null
    created_on?: DateTimeFilter | Date | string
    last_modifiered?: DateTimeNullableFilter | Date | string | null
  }

  export type modifierOrderByWithRelationInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    class?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    created_on?: SortOrder
    last_modifiered?: SortOrder
  }

  export type modifierWhereUniqueInput = {
    modifier_id?: number
  }

  export type modifierOrderByWithAggregationInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    class?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    created_on?: SortOrder
    last_modifiered?: SortOrder
    _count?: modifierCountOrderByAggregateInput
    _avg?: modifierAvgOrderByAggregateInput
    _max?: modifierMaxOrderByAggregateInput
    _min?: modifierMinOrderByAggregateInput
    _sum?: modifierSumOrderByAggregateInput
  }

  export type modifierScalarWhereWithAggregatesInput = {
    AND?: Enumerable<modifierScalarWhereWithAggregatesInput>
    OR?: Enumerable<modifierScalarWhereWithAggregatesInput>
    NOT?: Enumerable<modifierScalarWhereWithAggregatesInput>
    modifier_id?: IntWithAggregatesFilter | number
    shop_id?: IntNullableWithAggregatesFilter | number | null
    menu_id?: IntNullableWithAggregatesFilter | number | null
    name?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    class?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    ingredients?: StringNullableWithAggregatesFilter | string | null
    created_on?: DateTimeWithAggregatesFilter | Date | string
    last_modifiered?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type passWhereInput = {
    AND?: Enumerable<passWhereInput>
    OR?: Enumerable<passWhereInput>
    NOT?: Enumerable<passWhereInput>
    pass_id?: IntFilter | number
    shop_id?: IntFilter | number
    pass_name?: IntFilter | number
    pass_description?: StringNullableFilter | string | null
    created_on?: DateTimeFilter | Date | string
    last_modified?: DateTimeNullableFilter | Date | string | null
    active?: IntFilter | number
    pass_base_price?: FloatNullableFilter | number | null
    pass_base_price_frequency?: IntNullableFilter | number | null
    pass_payment_method?: IntNullableFilter | number | null
    pass_additional_pricing?: IntNullableFilter | number | null
    pass_other_options?: IntNullableFilter | number | null
    pass_currency?: StringNullableFilter | string | null
    perk_item_1?: IntNullableFilter | number | null
    perk_item_2?: IntNullableFilter | number | null
    perk_item_3?: IntNullableFilter | number | null
    perk_item_4?: IntNullableFilter | number | null
    perk_item_5?: IntNullableFilter | number | null
    perk_item_6?: IntNullableFilter | number | null
    perk_item_7?: IntNullableFilter | number | null
    perk_item_8?: IntNullableFilter | number | null
    perk_item_9?: IntNullableFilter | number | null
    perk_item_10?: IntNullableFilter | number | null
    perk_item_11?: IntNullableFilter | number | null
    perk_item_12?: IntNullableFilter | number | null
    custom_perk_item_1?: IntNullableFilter | number | null
    custom_perk_item_2?: IntNullableFilter | number | null
    custom_perk_item_3?: IntNullableFilter | number | null
    custom_perk_item_4?: IntNullableFilter | number | null
    custom_perk_item_5?: IntNullableFilter | number | null
    custom_perk_item_6?: IntNullableFilter | number | null
    custom_perk_item_1_price?: FloatNullableFilter | number | null
    custom_perk_item_2_price?: FloatNullableFilter | number | null
    custom_perk_item_3_price?: FloatNullableFilter | number | null
    custom_perk_item_4_price?: FloatNullableFilter | number | null
    custom_perk_item_5_price?: FloatNullableFilter | number | null
    custom_perk_item_6_price?: FloatNullableFilter | number | null
    visible?: IntNullableFilter | number | null
    requirement_1?: IntNullableFilter | number | null
    requirement_2?: IntNullableFilter | number | null
    requirement_3?: IntNullableFilter | number | null
    requirement_4?: IntNullableFilter | number | null
    requirement_5?: IntNullableFilter | number | null
    requirement_6?: IntNullableFilter | number | null
    requirement_7?: IntNullableFilter | number | null
    requirement_8?: IntNullableFilter | number | null
    requirement_9?: IntNullableFilter | number | null
  }

  export type passOrderByWithRelationInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    pass_description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    pass_currency?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type passWhereUniqueInput = {
    pass_id?: number
  }

  export type passOrderByWithAggregationInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    pass_description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    pass_currency?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
    _count?: passCountOrderByAggregateInput
    _avg?: passAvgOrderByAggregateInput
    _max?: passMaxOrderByAggregateInput
    _min?: passMinOrderByAggregateInput
    _sum?: passSumOrderByAggregateInput
  }

  export type passScalarWhereWithAggregatesInput = {
    AND?: Enumerable<passScalarWhereWithAggregatesInput>
    OR?: Enumerable<passScalarWhereWithAggregatesInput>
    NOT?: Enumerable<passScalarWhereWithAggregatesInput>
    pass_id?: IntWithAggregatesFilter | number
    shop_id?: IntWithAggregatesFilter | number
    pass_name?: IntWithAggregatesFilter | number
    pass_description?: StringNullableWithAggregatesFilter | string | null
    created_on?: DateTimeWithAggregatesFilter | Date | string
    last_modified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    active?: IntWithAggregatesFilter | number
    pass_base_price?: FloatNullableWithAggregatesFilter | number | null
    pass_base_price_frequency?: IntNullableWithAggregatesFilter | number | null
    pass_payment_method?: IntNullableWithAggregatesFilter | number | null
    pass_additional_pricing?: IntNullableWithAggregatesFilter | number | null
    pass_other_options?: IntNullableWithAggregatesFilter | number | null
    pass_currency?: StringNullableWithAggregatesFilter | string | null
    perk_item_1?: IntNullableWithAggregatesFilter | number | null
    perk_item_2?: IntNullableWithAggregatesFilter | number | null
    perk_item_3?: IntNullableWithAggregatesFilter | number | null
    perk_item_4?: IntNullableWithAggregatesFilter | number | null
    perk_item_5?: IntNullableWithAggregatesFilter | number | null
    perk_item_6?: IntNullableWithAggregatesFilter | number | null
    perk_item_7?: IntNullableWithAggregatesFilter | number | null
    perk_item_8?: IntNullableWithAggregatesFilter | number | null
    perk_item_9?: IntNullableWithAggregatesFilter | number | null
    perk_item_10?: IntNullableWithAggregatesFilter | number | null
    perk_item_11?: IntNullableWithAggregatesFilter | number | null
    perk_item_12?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_1?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_2?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_3?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_4?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_5?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_6?: IntNullableWithAggregatesFilter | number | null
    custom_perk_item_1_price?: FloatNullableWithAggregatesFilter | number | null
    custom_perk_item_2_price?: FloatNullableWithAggregatesFilter | number | null
    custom_perk_item_3_price?: FloatNullableWithAggregatesFilter | number | null
    custom_perk_item_4_price?: FloatNullableWithAggregatesFilter | number | null
    custom_perk_item_5_price?: FloatNullableWithAggregatesFilter | number | null
    custom_perk_item_6_price?: FloatNullableWithAggregatesFilter | number | null
    visible?: IntNullableWithAggregatesFilter | number | null
    requirement_1?: IntNullableWithAggregatesFilter | number | null
    requirement_2?: IntNullableWithAggregatesFilter | number | null
    requirement_3?: IntNullableWithAggregatesFilter | number | null
    requirement_4?: IntNullableWithAggregatesFilter | number | null
    requirement_5?: IntNullableWithAggregatesFilter | number | null
    requirement_6?: IntNullableWithAggregatesFilter | number | null
    requirement_7?: IntNullableWithAggregatesFilter | number | null
    requirement_8?: IntNullableWithAggregatesFilter | number | null
    requirement_9?: IntNullableWithAggregatesFilter | number | null
  }

  export type shopWhereInput = {
    AND?: Enumerable<shopWhereInput>
    OR?: Enumerable<shopWhereInput>
    NOT?: Enumerable<shopWhereInput>
    shop_id?: IntFilter | number
    shop_name?: StringNullableFilter | string | null
    shop_description?: StringNullableFilter | string | null
    shop_address?: StringNullableFilter | string | null
    shop_phone_number?: StringNullableFilter | string | null
    shop_email?: StringNullableFilter | string | null
    shop_owner_name?: StringNullableFilter | string | null
    created_on?: DateTimeFilter | Date | string
    last_modified?: DateTimeNullableFilter | Date | string | null
    availability_1?: IntNullableListFilter
    availability_2?: IntNullableListFilter
    availability_3?: IntNullableListFilter
    availability_4?: IntNullableListFilter
    availability_5?: IntNullableListFilter
    availability_6?: IntNullableListFilter
    availability_7?: IntNullableListFilter
    active?: IntNullableFilter | number | null
    shop_fee?: FloatNullableFilter | number | null
    shop_pay_frquency?: IntNullableFilter | number | null
    shop_pay_date?: DateTimeNullableFilter | Date | string | null
  }

  export type shopOrderByWithRelationInput = {
    shop_id?: SortOrder
    shop_name?: SortOrder
    shop_description?: SortOrder
    shop_address?: SortOrder
    shop_phone_number?: SortOrder
    shop_email?: SortOrder
    shop_owner_name?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    availability_1?: SortOrder
    availability_2?: SortOrder
    availability_3?: SortOrder
    availability_4?: SortOrder
    availability_5?: SortOrder
    availability_6?: SortOrder
    availability_7?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
    shop_pay_date?: SortOrder
  }

  export type shopWhereUniqueInput = {
    shop_id?: number
  }

  export type shopOrderByWithAggregationInput = {
    shop_id?: SortOrder
    shop_name?: SortOrder
    shop_description?: SortOrder
    shop_address?: SortOrder
    shop_phone_number?: SortOrder
    shop_email?: SortOrder
    shop_owner_name?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    availability_1?: SortOrder
    availability_2?: SortOrder
    availability_3?: SortOrder
    availability_4?: SortOrder
    availability_5?: SortOrder
    availability_6?: SortOrder
    availability_7?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
    shop_pay_date?: SortOrder
    _count?: shopCountOrderByAggregateInput
    _avg?: shopAvgOrderByAggregateInput
    _max?: shopMaxOrderByAggregateInput
    _min?: shopMinOrderByAggregateInput
    _sum?: shopSumOrderByAggregateInput
  }

  export type shopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<shopScalarWhereWithAggregatesInput>
    OR?: Enumerable<shopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<shopScalarWhereWithAggregatesInput>
    shop_id?: IntWithAggregatesFilter | number
    shop_name?: StringNullableWithAggregatesFilter | string | null
    shop_description?: StringNullableWithAggregatesFilter | string | null
    shop_address?: StringNullableWithAggregatesFilter | string | null
    shop_phone_number?: StringNullableWithAggregatesFilter | string | null
    shop_email?: StringNullableWithAggregatesFilter | string | null
    shop_owner_name?: StringNullableWithAggregatesFilter | string | null
    created_on?: DateTimeWithAggregatesFilter | Date | string
    last_modified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    availability_1?: IntNullableListFilter
    availability_2?: IntNullableListFilter
    availability_3?: IntNullableListFilter
    availability_4?: IntNullableListFilter
    availability_5?: IntNullableListFilter
    availability_6?: IntNullableListFilter
    availability_7?: IntNullableListFilter
    active?: IntNullableWithAggregatesFilter | number | null
    shop_fee?: FloatNullableWithAggregatesFilter | number | null
    shop_pay_frquency?: IntNullableWithAggregatesFilter | number | null
    shop_pay_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    is_shop?: IntFilter | number
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_shop?: SortOrder
  }

  export type userWhereUniqueInput = {
    id?: number
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_shop?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    is_shop?: IntWithAggregatesFilter | number
  }

  export type customerCreateInput = {
    full_name: string
    email: string
    passowrd: string
    date_of_birth: string
    language?: string | null
    city?: string | null
    membership_status?: string | null
    created_on?: Date | string
    last_modifier?: Date | string | null
    last_login?: Date | string | null
    user_id?: number | null
  }

  export type customerUncheckedCreateInput = {
    customer_id?: number
    full_name: string
    email: string
    passowrd: string
    date_of_birth: string
    language?: string | null
    city?: string | null
    membership_status?: string | null
    created_on?: Date | string
    last_modifier?: Date | string | null
    last_login?: Date | string | null
    user_id?: number | null
  }

  export type customerUpdateInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passowrd?: StringFieldUpdateOperationsInput | string
    date_of_birth?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    membership_status?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifier?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passowrd?: StringFieldUpdateOperationsInput | string
    date_of_birth?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    membership_status?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifier?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerCreateManyInput = {
    customer_id?: number
    full_name: string
    email: string
    passowrd: string
    date_of_birth: string
    language?: string | null
    city?: string | null
    membership_status?: string | null
    created_on?: Date | string
    last_modifier?: Date | string | null
    last_login?: Date | string | null
    user_id?: number | null
  }

  export type customerUpdateManyMutationInput = {
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passowrd?: StringFieldUpdateOperationsInput | string
    date_of_birth?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    membership_status?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifier?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateManyInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    full_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passowrd?: StringFieldUpdateOperationsInput | string
    date_of_birth?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    membership_status?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifier?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type memberCreateInput = {
    user_id?: number | null
    shop_id?: number | null
  }

  export type memberUncheckedCreateInput = {
    member_id?: number
    user_id?: number | null
    shop_id?: number | null
  }

  export type memberUpdateInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type memberUncheckedUpdateInput = {
    member_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type memberCreateManyInput = {
    member_id?: number
    user_id?: number | null
    shop_id?: number | null
  }

  export type memberUpdateManyMutationInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type memberUncheckedUpdateManyInput = {
    member_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type membershipCreateInput = {
    user_id?: number | null
    creation_on?: Date | string
    subscribed_on: Date | string
    active?: number
    total_redemptions: number
    remaining_redemptions: number
    refill_frequency?: number | null
    last_refill?: Date | string | null
    last_modifiered?: Date | string | null
    pass_id?: number | null
  }

  export type membershipUncheckedCreateInput = {
    user_id?: number | null
    creation_on?: Date | string
    subscribed_on: Date | string
    active?: number
    total_redemptions: number
    remaining_redemptions: number
    refill_frequency?: number | null
    last_refill?: Date | string | null
    last_modifiered?: Date | string | null
    membership_id?: number
    pass_id?: number | null
  }

  export type membershipUpdateInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_on?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: IntFieldUpdateOperationsInput | number
    total_redemptions?: IntFieldUpdateOperationsInput | number
    remaining_redemptions?: IntFieldUpdateOperationsInput | number
    refill_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    last_refill?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pass_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type membershipUncheckedUpdateInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_on?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: IntFieldUpdateOperationsInput | number
    total_redemptions?: IntFieldUpdateOperationsInput | number
    remaining_redemptions?: IntFieldUpdateOperationsInput | number
    refill_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    last_refill?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    membership_id?: IntFieldUpdateOperationsInput | number
    pass_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type membershipCreateManyInput = {
    user_id?: number | null
    creation_on?: Date | string
    subscribed_on: Date | string
    active?: number
    total_redemptions: number
    remaining_redemptions: number
    refill_frequency?: number | null
    last_refill?: Date | string | null
    last_modifiered?: Date | string | null
    membership_id?: number
    pass_id?: number | null
  }

  export type membershipUpdateManyMutationInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_on?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: IntFieldUpdateOperationsInput | number
    total_redemptions?: IntFieldUpdateOperationsInput | number
    remaining_redemptions?: IntFieldUpdateOperationsInput | number
    refill_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    last_refill?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pass_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type membershipUncheckedUpdateManyInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_on?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed_on?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: IntFieldUpdateOperationsInput | number
    total_redemptions?: IntFieldUpdateOperationsInput | number
    remaining_redemptions?: IntFieldUpdateOperationsInput | number
    refill_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    last_refill?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    membership_id?: IntFieldUpdateOperationsInput | number
    pass_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menuCreateInput = {
    shop_id: number
    name: string
    description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    modifier_1?: number | null
    modifier_2?: number | null
    modifier_3?: number | null
    modifier_4?: number | null
    modifier_5?: number | null
  }

  export type menuUncheckedCreateInput = {
    menu_id?: number
    shop_id: number
    name: string
    description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    modifier_1?: number | null
    modifier_2?: number | null
    modifier_3?: number | null
    modifier_4?: number | null
    modifier_5?: number | null
  }

  export type menuUpdateInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifier_1?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_2?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_3?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_4?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_5?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menuUncheckedUpdateInput = {
    menu_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifier_1?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_2?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_3?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_4?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_5?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menuCreateManyInput = {
    menu_id?: number
    shop_id: number
    name: string
    description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    modifier_1?: number | null
    modifier_2?: number | null
    modifier_3?: number | null
    modifier_4?: number | null
    modifier_5?: number | null
  }

  export type menuUpdateManyMutationInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifier_1?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_2?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_3?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_4?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_5?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type menuUncheckedUpdateManyInput = {
    menu_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifier_1?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_2?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_3?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_4?: NullableIntFieldUpdateOperationsInput | number | null
    modifier_5?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type modifierCreateInput = {
    shop_id?: number | null
    menu_id?: number | null
    name?: string | null
    type?: string | null
    class?: string | null
    description?: string | null
    ingredients?: string | null
    created_on?: Date | string
    last_modifiered?: Date | string | null
  }

  export type modifierUncheckedCreateInput = {
    modifier_id?: number
    shop_id?: number | null
    menu_id?: number | null
    name?: string | null
    type?: string | null
    class?: string | null
    description?: string | null
    ingredients?: string | null
    created_on?: Date | string
    last_modifiered?: Date | string | null
  }

  export type modifierUpdateInput = {
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
    menu_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type modifierUncheckedUpdateInput = {
    modifier_id?: IntFieldUpdateOperationsInput | number
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
    menu_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type modifierCreateManyInput = {
    modifier_id?: number
    shop_id?: number | null
    menu_id?: number | null
    name?: string | null
    type?: string | null
    class?: string | null
    description?: string | null
    ingredients?: string | null
    created_on?: Date | string
    last_modifiered?: Date | string | null
  }

  export type modifierUpdateManyMutationInput = {
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
    menu_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type modifierUncheckedUpdateManyInput = {
    modifier_id?: IntFieldUpdateOperationsInput | number
    shop_id?: NullableIntFieldUpdateOperationsInput | number | null
    menu_id?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modifiered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type passCreateInput = {
    shop_id: number
    pass_name: number
    pass_description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    active?: number
    pass_base_price?: number | null
    pass_base_price_frequency?: number | null
    pass_payment_method?: number | null
    pass_additional_pricing?: number | null
    pass_other_options?: number | null
    pass_currency?: string | null
    perk_item_1?: number | null
    perk_item_2?: number | null
    perk_item_3?: number | null
    perk_item_4?: number | null
    perk_item_5?: number | null
    perk_item_6?: number | null
    perk_item_7?: number | null
    perk_item_8?: number | null
    perk_item_9?: number | null
    perk_item_10?: number | null
    perk_item_11?: number | null
    perk_item_12?: number | null
    custom_perk_item_1?: number | null
    custom_perk_item_2?: number | null
    custom_perk_item_3?: number | null
    custom_perk_item_4?: number | null
    custom_perk_item_5?: number | null
    custom_perk_item_6?: number | null
    custom_perk_item_1_price?: number | null
    custom_perk_item_2_price?: number | null
    custom_perk_item_3_price?: number | null
    custom_perk_item_4_price?: number | null
    custom_perk_item_5_price?: number | null
    custom_perk_item_6_price?: number | null
    visible?: number | null
    requirement_1?: number | null
    requirement_2?: number | null
    requirement_3?: number | null
    requirement_4?: number | null
    requirement_5?: number | null
    requirement_6?: number | null
    requirement_7?: number | null
    requirement_8?: number | null
    requirement_9?: number | null
  }

  export type passUncheckedCreateInput = {
    pass_id?: number
    shop_id: number
    pass_name: number
    pass_description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    active?: number
    pass_base_price?: number | null
    pass_base_price_frequency?: number | null
    pass_payment_method?: number | null
    pass_additional_pricing?: number | null
    pass_other_options?: number | null
    pass_currency?: string | null
    perk_item_1?: number | null
    perk_item_2?: number | null
    perk_item_3?: number | null
    perk_item_4?: number | null
    perk_item_5?: number | null
    perk_item_6?: number | null
    perk_item_7?: number | null
    perk_item_8?: number | null
    perk_item_9?: number | null
    perk_item_10?: number | null
    perk_item_11?: number | null
    perk_item_12?: number | null
    custom_perk_item_1?: number | null
    custom_perk_item_2?: number | null
    custom_perk_item_3?: number | null
    custom_perk_item_4?: number | null
    custom_perk_item_5?: number | null
    custom_perk_item_6?: number | null
    custom_perk_item_1_price?: number | null
    custom_perk_item_2_price?: number | null
    custom_perk_item_3_price?: number | null
    custom_perk_item_4_price?: number | null
    custom_perk_item_5_price?: number | null
    custom_perk_item_6_price?: number | null
    visible?: number | null
    requirement_1?: number | null
    requirement_2?: number | null
    requirement_3?: number | null
    requirement_4?: number | null
    requirement_5?: number | null
    requirement_6?: number | null
    requirement_7?: number | null
    requirement_8?: number | null
    requirement_9?: number | null
  }

  export type passUpdateInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    pass_name?: IntFieldUpdateOperationsInput | number
    pass_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: IntFieldUpdateOperationsInput | number
    pass_base_price?: NullableFloatFieldUpdateOperationsInput | number | null
    pass_base_price_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    pass_payment_method?: NullableIntFieldUpdateOperationsInput | number | null
    pass_additional_pricing?: NullableIntFieldUpdateOperationsInput | number | null
    pass_other_options?: NullableIntFieldUpdateOperationsInput | number | null
    pass_currency?: NullableStringFieldUpdateOperationsInput | string | null
    perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_7?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_8?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_9?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_10?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_11?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_12?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_2_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_3_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_4_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_5_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_6_price?: NullableFloatFieldUpdateOperationsInput | number | null
    visible?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_1?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_2?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_3?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_4?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_5?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_6?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_7?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_8?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_9?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type passUncheckedUpdateInput = {
    pass_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
    pass_name?: IntFieldUpdateOperationsInput | number
    pass_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: IntFieldUpdateOperationsInput | number
    pass_base_price?: NullableFloatFieldUpdateOperationsInput | number | null
    pass_base_price_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    pass_payment_method?: NullableIntFieldUpdateOperationsInput | number | null
    pass_additional_pricing?: NullableIntFieldUpdateOperationsInput | number | null
    pass_other_options?: NullableIntFieldUpdateOperationsInput | number | null
    pass_currency?: NullableStringFieldUpdateOperationsInput | string | null
    perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_7?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_8?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_9?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_10?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_11?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_12?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_2_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_3_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_4_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_5_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_6_price?: NullableFloatFieldUpdateOperationsInput | number | null
    visible?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_1?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_2?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_3?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_4?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_5?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_6?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_7?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_8?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_9?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type passCreateManyInput = {
    pass_id?: number
    shop_id: number
    pass_name: number
    pass_description?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    active?: number
    pass_base_price?: number | null
    pass_base_price_frequency?: number | null
    pass_payment_method?: number | null
    pass_additional_pricing?: number | null
    pass_other_options?: number | null
    pass_currency?: string | null
    perk_item_1?: number | null
    perk_item_2?: number | null
    perk_item_3?: number | null
    perk_item_4?: number | null
    perk_item_5?: number | null
    perk_item_6?: number | null
    perk_item_7?: number | null
    perk_item_8?: number | null
    perk_item_9?: number | null
    perk_item_10?: number | null
    perk_item_11?: number | null
    perk_item_12?: number | null
    custom_perk_item_1?: number | null
    custom_perk_item_2?: number | null
    custom_perk_item_3?: number | null
    custom_perk_item_4?: number | null
    custom_perk_item_5?: number | null
    custom_perk_item_6?: number | null
    custom_perk_item_1_price?: number | null
    custom_perk_item_2_price?: number | null
    custom_perk_item_3_price?: number | null
    custom_perk_item_4_price?: number | null
    custom_perk_item_5_price?: number | null
    custom_perk_item_6_price?: number | null
    visible?: number | null
    requirement_1?: number | null
    requirement_2?: number | null
    requirement_3?: number | null
    requirement_4?: number | null
    requirement_5?: number | null
    requirement_6?: number | null
    requirement_7?: number | null
    requirement_8?: number | null
    requirement_9?: number | null
  }

  export type passUpdateManyMutationInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    pass_name?: IntFieldUpdateOperationsInput | number
    pass_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: IntFieldUpdateOperationsInput | number
    pass_base_price?: NullableFloatFieldUpdateOperationsInput | number | null
    pass_base_price_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    pass_payment_method?: NullableIntFieldUpdateOperationsInput | number | null
    pass_additional_pricing?: NullableIntFieldUpdateOperationsInput | number | null
    pass_other_options?: NullableIntFieldUpdateOperationsInput | number | null
    pass_currency?: NullableStringFieldUpdateOperationsInput | string | null
    perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_7?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_8?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_9?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_10?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_11?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_12?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_2_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_3_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_4_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_5_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_6_price?: NullableFloatFieldUpdateOperationsInput | number | null
    visible?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_1?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_2?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_3?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_4?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_5?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_6?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_7?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_8?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_9?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type passUncheckedUpdateManyInput = {
    pass_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
    pass_name?: IntFieldUpdateOperationsInput | number
    pass_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: IntFieldUpdateOperationsInput | number
    pass_base_price?: NullableFloatFieldUpdateOperationsInput | number | null
    pass_base_price_frequency?: NullableIntFieldUpdateOperationsInput | number | null
    pass_payment_method?: NullableIntFieldUpdateOperationsInput | number | null
    pass_additional_pricing?: NullableIntFieldUpdateOperationsInput | number | null
    pass_other_options?: NullableIntFieldUpdateOperationsInput | number | null
    pass_currency?: NullableStringFieldUpdateOperationsInput | string | null
    perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_7?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_8?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_9?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_10?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_11?: NullableIntFieldUpdateOperationsInput | number | null
    perk_item_12?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_2?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_3?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_4?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_5?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_6?: NullableIntFieldUpdateOperationsInput | number | null
    custom_perk_item_1_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_2_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_3_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_4_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_5_price?: NullableFloatFieldUpdateOperationsInput | number | null
    custom_perk_item_6_price?: NullableFloatFieldUpdateOperationsInput | number | null
    visible?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_1?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_2?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_3?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_4?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_5?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_6?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_7?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_8?: NullableIntFieldUpdateOperationsInput | number | null
    requirement_9?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type shopCreateInput = {
    shop_name?: string | null
    shop_description?: string | null
    shop_address?: string | null
    shop_phone_number?: string | null
    shop_email?: string | null
    shop_owner_name?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    availability_1?: shopCreateavailability_1Input | Enumerable<number>
    availability_2?: shopCreateavailability_2Input | Enumerable<number>
    availability_3?: shopCreateavailability_3Input | Enumerable<number>
    availability_4?: shopCreateavailability_4Input | Enumerable<number>
    availability_5?: shopCreateavailability_5Input | Enumerable<number>
    availability_6?: shopCreateavailability_6Input | Enumerable<number>
    availability_7?: shopCreateavailability_7Input | Enumerable<number>
    active?: number | null
    shop_fee?: number | null
    shop_pay_frquency?: number | null
    shop_pay_date?: Date | string | null
  }

  export type shopUncheckedCreateInput = {
    shop_id?: number
    shop_name?: string | null
    shop_description?: string | null
    shop_address?: string | null
    shop_phone_number?: string | null
    shop_email?: string | null
    shop_owner_name?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    availability_1?: shopCreateavailability_1Input | Enumerable<number>
    availability_2?: shopCreateavailability_2Input | Enumerable<number>
    availability_3?: shopCreateavailability_3Input | Enumerable<number>
    availability_4?: shopCreateavailability_4Input | Enumerable<number>
    availability_5?: shopCreateavailability_5Input | Enumerable<number>
    availability_6?: shopCreateavailability_6Input | Enumerable<number>
    availability_7?: shopCreateavailability_7Input | Enumerable<number>
    active?: number | null
    shop_fee?: number | null
    shop_pay_frquency?: number | null
    shop_pay_date?: Date | string | null
  }

  export type shopUpdateInput = {
    shop_name?: NullableStringFieldUpdateOperationsInput | string | null
    shop_description?: NullableStringFieldUpdateOperationsInput | string | null
    shop_address?: NullableStringFieldUpdateOperationsInput | string | null
    shop_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    shop_email?: NullableStringFieldUpdateOperationsInput | string | null
    shop_owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availability_1?: shopUpdateavailability_1Input | Enumerable<number>
    availability_2?: shopUpdateavailability_2Input | Enumerable<number>
    availability_3?: shopUpdateavailability_3Input | Enumerable<number>
    availability_4?: shopUpdateavailability_4Input | Enumerable<number>
    availability_5?: shopUpdateavailability_5Input | Enumerable<number>
    availability_6?: shopUpdateavailability_6Input | Enumerable<number>
    availability_7?: shopUpdateavailability_7Input | Enumerable<number>
    active?: NullableIntFieldUpdateOperationsInput | number | null
    shop_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    shop_pay_frquency?: NullableIntFieldUpdateOperationsInput | number | null
    shop_pay_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shopUncheckedUpdateInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    shop_name?: NullableStringFieldUpdateOperationsInput | string | null
    shop_description?: NullableStringFieldUpdateOperationsInput | string | null
    shop_address?: NullableStringFieldUpdateOperationsInput | string | null
    shop_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    shop_email?: NullableStringFieldUpdateOperationsInput | string | null
    shop_owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availability_1?: shopUpdateavailability_1Input | Enumerable<number>
    availability_2?: shopUpdateavailability_2Input | Enumerable<number>
    availability_3?: shopUpdateavailability_3Input | Enumerable<number>
    availability_4?: shopUpdateavailability_4Input | Enumerable<number>
    availability_5?: shopUpdateavailability_5Input | Enumerable<number>
    availability_6?: shopUpdateavailability_6Input | Enumerable<number>
    availability_7?: shopUpdateavailability_7Input | Enumerable<number>
    active?: NullableIntFieldUpdateOperationsInput | number | null
    shop_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    shop_pay_frquency?: NullableIntFieldUpdateOperationsInput | number | null
    shop_pay_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shopCreateManyInput = {
    shop_id?: number
    shop_name?: string | null
    shop_description?: string | null
    shop_address?: string | null
    shop_phone_number?: string | null
    shop_email?: string | null
    shop_owner_name?: string | null
    created_on?: Date | string
    last_modified?: Date | string | null
    availability_1?: shopCreateavailability_1Input | Enumerable<number>
    availability_2?: shopCreateavailability_2Input | Enumerable<number>
    availability_3?: shopCreateavailability_3Input | Enumerable<number>
    availability_4?: shopCreateavailability_4Input | Enumerable<number>
    availability_5?: shopCreateavailability_5Input | Enumerable<number>
    availability_6?: shopCreateavailability_6Input | Enumerable<number>
    availability_7?: shopCreateavailability_7Input | Enumerable<number>
    active?: number | null
    shop_fee?: number | null
    shop_pay_frquency?: number | null
    shop_pay_date?: Date | string | null
  }

  export type shopUpdateManyMutationInput = {
    shop_name?: NullableStringFieldUpdateOperationsInput | string | null
    shop_description?: NullableStringFieldUpdateOperationsInput | string | null
    shop_address?: NullableStringFieldUpdateOperationsInput | string | null
    shop_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    shop_email?: NullableStringFieldUpdateOperationsInput | string | null
    shop_owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availability_1?: shopUpdateavailability_1Input | Enumerable<number>
    availability_2?: shopUpdateavailability_2Input | Enumerable<number>
    availability_3?: shopUpdateavailability_3Input | Enumerable<number>
    availability_4?: shopUpdateavailability_4Input | Enumerable<number>
    availability_5?: shopUpdateavailability_5Input | Enumerable<number>
    availability_6?: shopUpdateavailability_6Input | Enumerable<number>
    availability_7?: shopUpdateavailability_7Input | Enumerable<number>
    active?: NullableIntFieldUpdateOperationsInput | number | null
    shop_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    shop_pay_frquency?: NullableIntFieldUpdateOperationsInput | number | null
    shop_pay_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shopUncheckedUpdateManyInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
    shop_name?: NullableStringFieldUpdateOperationsInput | string | null
    shop_description?: NullableStringFieldUpdateOperationsInput | string | null
    shop_address?: NullableStringFieldUpdateOperationsInput | string | null
    shop_phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    shop_email?: NullableStringFieldUpdateOperationsInput | string | null
    shop_owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_modified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    availability_1?: shopUpdateavailability_1Input | Enumerable<number>
    availability_2?: shopUpdateavailability_2Input | Enumerable<number>
    availability_3?: shopUpdateavailability_3Input | Enumerable<number>
    availability_4?: shopUpdateavailability_4Input | Enumerable<number>
    availability_5?: shopUpdateavailability_5Input | Enumerable<number>
    availability_6?: shopUpdateavailability_6Input | Enumerable<number>
    availability_7?: shopUpdateavailability_7Input | Enumerable<number>
    active?: NullableIntFieldUpdateOperationsInput | number | null
    shop_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    shop_pay_frquency?: NullableIntFieldUpdateOperationsInput | number | null
    shop_pay_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userCreateInput = {
    email: string
    password: string
    is_shop?: number
  }

  export type userUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    is_shop?: number
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_shop?: IntFieldUpdateOperationsInput | number
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_shop?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateManyInput = {
    id?: number
    email: string
    password: string
    is_shop?: number
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_shop?: IntFieldUpdateOperationsInput | number
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    is_shop?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type customerCountOrderByAggregateInput = {
    customer_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    passowrd?: SortOrder
    date_of_birth?: SortOrder
    language?: SortOrder
    city?: SortOrder
    membership_status?: SortOrder
    created_on?: SortOrder
    last_modifier?: SortOrder
    last_login?: SortOrder
    user_id?: SortOrder
  }

  export type customerAvgOrderByAggregateInput = {
    customer_id?: SortOrder
    user_id?: SortOrder
  }

  export type customerMaxOrderByAggregateInput = {
    customer_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    passowrd?: SortOrder
    date_of_birth?: SortOrder
    language?: SortOrder
    city?: SortOrder
    membership_status?: SortOrder
    created_on?: SortOrder
    last_modifier?: SortOrder
    last_login?: SortOrder
    user_id?: SortOrder
  }

  export type customerMinOrderByAggregateInput = {
    customer_id?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    passowrd?: SortOrder
    date_of_birth?: SortOrder
    language?: SortOrder
    city?: SortOrder
    membership_status?: SortOrder
    created_on?: SortOrder
    last_modifier?: SortOrder
    last_login?: SortOrder
    user_id?: SortOrder
  }

  export type customerSumOrderByAggregateInput = {
    customer_id?: SortOrder
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type memberCountOrderByAggregateInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type memberAvgOrderByAggregateInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type memberMaxOrderByAggregateInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type memberMinOrderByAggregateInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type memberSumOrderByAggregateInput = {
    member_id?: SortOrder
    user_id?: SortOrder
    shop_id?: SortOrder
  }

  export type membershipCountOrderByAggregateInput = {
    user_id?: SortOrder
    creation_on?: SortOrder
    subscribed_on?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    last_refill?: SortOrder
    last_modifiered?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type membershipAvgOrderByAggregateInput = {
    user_id?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type membershipMaxOrderByAggregateInput = {
    user_id?: SortOrder
    creation_on?: SortOrder
    subscribed_on?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    last_refill?: SortOrder
    last_modifiered?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type membershipMinOrderByAggregateInput = {
    user_id?: SortOrder
    creation_on?: SortOrder
    subscribed_on?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    last_refill?: SortOrder
    last_modifiered?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type membershipSumOrderByAggregateInput = {
    user_id?: SortOrder
    active?: SortOrder
    total_redemptions?: SortOrder
    remaining_redemptions?: SortOrder
    refill_frequency?: SortOrder
    membership_id?: SortOrder
    pass_id?: SortOrder
  }

  export type menuCountOrderByAggregateInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type menuAvgOrderByAggregateInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type menuMaxOrderByAggregateInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type menuMinOrderByAggregateInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type menuSumOrderByAggregateInput = {
    menu_id?: SortOrder
    shop_id?: SortOrder
    modifier_1?: SortOrder
    modifier_2?: SortOrder
    modifier_3?: SortOrder
    modifier_4?: SortOrder
    modifier_5?: SortOrder
  }

  export type modifierCountOrderByAggregateInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    class?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    created_on?: SortOrder
    last_modifiered?: SortOrder
  }

  export type modifierAvgOrderByAggregateInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
  }

  export type modifierMaxOrderByAggregateInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    class?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    created_on?: SortOrder
    last_modifiered?: SortOrder
  }

  export type modifierMinOrderByAggregateInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    class?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    created_on?: SortOrder
    last_modifiered?: SortOrder
  }

  export type modifierSumOrderByAggregateInput = {
    modifier_id?: SortOrder
    shop_id?: SortOrder
    menu_id?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type passCountOrderByAggregateInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    pass_description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    pass_currency?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type passAvgOrderByAggregateInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type passMaxOrderByAggregateInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    pass_description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    pass_currency?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type passMinOrderByAggregateInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    pass_description?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    pass_currency?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type passSumOrderByAggregateInput = {
    pass_id?: SortOrder
    shop_id?: SortOrder
    pass_name?: SortOrder
    active?: SortOrder
    pass_base_price?: SortOrder
    pass_base_price_frequency?: SortOrder
    pass_payment_method?: SortOrder
    pass_additional_pricing?: SortOrder
    pass_other_options?: SortOrder
    perk_item_1?: SortOrder
    perk_item_2?: SortOrder
    perk_item_3?: SortOrder
    perk_item_4?: SortOrder
    perk_item_5?: SortOrder
    perk_item_6?: SortOrder
    perk_item_7?: SortOrder
    perk_item_8?: SortOrder
    perk_item_9?: SortOrder
    perk_item_10?: SortOrder
    perk_item_11?: SortOrder
    perk_item_12?: SortOrder
    custom_perk_item_1?: SortOrder
    custom_perk_item_2?: SortOrder
    custom_perk_item_3?: SortOrder
    custom_perk_item_4?: SortOrder
    custom_perk_item_5?: SortOrder
    custom_perk_item_6?: SortOrder
    custom_perk_item_1_price?: SortOrder
    custom_perk_item_2_price?: SortOrder
    custom_perk_item_3_price?: SortOrder
    custom_perk_item_4_price?: SortOrder
    custom_perk_item_5_price?: SortOrder
    custom_perk_item_6_price?: SortOrder
    visible?: SortOrder
    requirement_1?: SortOrder
    requirement_2?: SortOrder
    requirement_3?: SortOrder
    requirement_4?: SortOrder
    requirement_5?: SortOrder
    requirement_6?: SortOrder
    requirement_7?: SortOrder
    requirement_8?: SortOrder
    requirement_9?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null
    has?: number | null
    hasEvery?: Enumerable<number>
    hasSome?: Enumerable<number>
    isEmpty?: boolean
  }

  export type shopCountOrderByAggregateInput = {
    shop_id?: SortOrder
    shop_name?: SortOrder
    shop_description?: SortOrder
    shop_address?: SortOrder
    shop_phone_number?: SortOrder
    shop_email?: SortOrder
    shop_owner_name?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    availability_1?: SortOrder
    availability_2?: SortOrder
    availability_3?: SortOrder
    availability_4?: SortOrder
    availability_5?: SortOrder
    availability_6?: SortOrder
    availability_7?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
    shop_pay_date?: SortOrder
  }

  export type shopAvgOrderByAggregateInput = {
    shop_id?: SortOrder
    availability_1?: SortOrder
    availability_2?: SortOrder
    availability_3?: SortOrder
    availability_4?: SortOrder
    availability_5?: SortOrder
    availability_6?: SortOrder
    availability_7?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
  }

  export type shopMaxOrderByAggregateInput = {
    shop_id?: SortOrder
    shop_name?: SortOrder
    shop_description?: SortOrder
    shop_address?: SortOrder
    shop_phone_number?: SortOrder
    shop_email?: SortOrder
    shop_owner_name?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
    shop_pay_date?: SortOrder
  }

  export type shopMinOrderByAggregateInput = {
    shop_id?: SortOrder
    shop_name?: SortOrder
    shop_description?: SortOrder
    shop_address?: SortOrder
    shop_phone_number?: SortOrder
    shop_email?: SortOrder
    shop_owner_name?: SortOrder
    created_on?: SortOrder
    last_modified?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
    shop_pay_date?: SortOrder
  }

  export type shopSumOrderByAggregateInput = {
    shop_id?: SortOrder
    availability_1?: SortOrder
    availability_2?: SortOrder
    availability_3?: SortOrder
    availability_4?: SortOrder
    availability_5?: SortOrder
    availability_6?: SortOrder
    availability_7?: SortOrder
    active?: SortOrder
    shop_fee?: SortOrder
    shop_pay_frquency?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_shop?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    is_shop?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_shop?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    is_shop?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    is_shop?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type shopCreateavailability_1Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_2Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_3Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_4Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_5Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_6Input = {
    set: Enumerable<number>
  }

  export type shopCreateavailability_7Input = {
    set: Enumerable<number>
  }

  export type shopUpdateavailability_1Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_2Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_3Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_4Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_5Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_6Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type shopUpdateavailability_7Input = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}